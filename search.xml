<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[脚本书写及执行注意事项]]></title>
      <url>https://blog.palemoky.top/2019/04/03/%E8%84%9A%E6%9C%AC%E4%B9%A6%E5%86%99%E5%8F%8A%E6%89%A7%E8%A1%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>工作中经常会写一些脚本来批量处理一些数据，有时一个脚本的执行时间可能长达数小时，而且中间随时可能出错中断，这可能是脚本对某些情况考虑不够全面，也可能是脏数据的问题。那么，如何才能写出健壮的脚本，让整个任务一气呵成呢？以下就根据我丰(cai)富(guo)的(de)经(keng)验来谈一谈。</p>
<ol>
<li>将执行的数据标志信息（如 ID）记录下来，当某条数据执行异常时，可以根据情况终止脚本或者记录失败数据后继续执行，在脚本调整后再将失败的部分进行“断点续传”。不然在执行中异常终止无法判断哪些是被执行过的，哪些是异常的以及未被执行的，而有些数据二次执行是会引发一些问题的，因此详细记录执行情况是非常有必要的</li>
<li>记录异常执行的上下文，便于快速定位失败原因</li>
<li>记录脚本的开始、结束时间，内存消耗情况，以及执行统计信息，如：共需执行m条数据，成功执行n条，执行失败x条，执行总耗时y等信息，还可以根据统计信息在脚本健壮执行后再进一步优化</li>
<li>执行完成进行邮件通知等消息通知，不必一直盯着脚本的执行</li>
<li>在真实数据执行前，一定要先在 mock 数据上验证一下脚本，有时数据量的不同也会导致脚本执行异常，所以 mock 数据量也要接近真实环境</li>
<li>如果可以在服务器上执行脚本，优先在服务器执行，毕竟服务器相比个人电脑性能及网络延时方面可能会更有优势，之前我在 Mac 上一个脚本执行了20分钟，在服务器上2分钟就执行完了😂</li>
<li>执行时使用 screen 或者 tmux，这两个工具可以让会话进行保持，当你登陆远程服务器执行一个长时间的脚本时，你需要一直盯在屏幕前，网络抖动、电脑休眠都有可能导致会话终止而使脚本退出。有了这两个工具后，你创建会话后就可以进行会话分离，退出远程服务器，然后去逛街，喝杯咖啡什么的，在你收到结束通知后再登陆服务器进行会话恢复，查看执行结果或者修复脚本，这一切是不是看起来美好了许多呢？</li>
</ol>
<p>目前就是这些了，再有新的经验随时补充:)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[时间黑洞]]></title>
      <url>https://blog.palemoky.top/2019/04/03/%E6%97%B6%E9%97%B4%E9%BB%91%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2><p><img src="https://medium.com/how-gipi-learn/%E7%82%BA%E4%BB%80%E9%BA%BC%E7%A2%8E%E7%89%87%E5%8C%96%E5%AD%B8%E7%BF%92%E5%B0%8D%E4%BD%A0%E6%B2%92%E6%95%88-18b91621142e" alt="為什麼碎片化學習對你沒效？"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】通俗讲解网站扩展]]></title>
      <url>https://blog.palemoky.top/2019/03/26/%E3%80%90%E8%AF%91%E3%80%91%E9%80%9A%E4%BF%97%E8%AE%B2%E8%A7%A3%E7%BD%91%E7%AB%99%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h1 id="【译】通俗讲解网站扩展"><a href="#【译】通俗讲解网站扩展" class="headerlink" title="【译】通俗讲解网站扩展"></a>【译】通俗讲解网站扩展</h1><blockquote>
<p><em>译者注：本文译自 Arcentry 文章《Scaling webapps for newbs &amp; non-techies》，点击<a href="https://arcentry.com/blog/scaling-webapps-for-newbs-and-non-techies/" target="_blank" rel="noopener">此处</a>查看原文</em></p>
</blockquote>
<p>本文简要的介绍了网站如何从一台服务器到承受数百万用户的架构部署演化，主要为新入门开发者和非从业人员而写。</p>
<h2 id="网站扩展"><a href="#网站扩展" class="headerlink" title="网站扩展"></a>网站扩展</h2><p>现在，假设你刚刚完成了你的网站，在线商店、社交 APP 或者别的什么，当项目上线时，感觉一切都好极了：每天有几百个用户访问你的网站，网站快速做出请求响应，一切都在有条不紊地进行着。</p>
<p>但是之后一件可怕的事情出现了：你的网站一夜爆红！</p>
<p>越来越多的用户开始涌向你的网站，每小时、每分钟、每秒钟成千上万的用户发来请求……这对老板来说，真是一个天大的好消息，但对基础运维来说，简直就是一场噩梦，因为现在，你需要做网站的扩展来承受洪水般的流量。这意味着你需要：</p>
<ul>
<li>同时处理更多的请求</li>
<li>除了光纤被挖断，服务的高可用</li>
<li>服务来自世界各地的用户</li>
</ul>
<h2 id="如何扩展"><a href="#如何扩展" class="headerlink" title="如何扩展"></a>如何扩展</h2><p>几年前，这样的问题会从水平扩展与垂直扩展的角度开始讨论。垂直扩展是指通过提升单机的处理能力来处理更多的请求，而水平扩展则是通过复制当前架构模型来提升处理能力。</p>
<p>今天，几乎没有人再使用垂直扩展，原因很简单：</p>
<ul>
<li>计算机的价格越来越昂贵，而性能提升却微乎其微</li>
<li>单台服务器的性能存在天花板</li>
<li>多核CPU也就是多个单核CPU的并行处理效率，那为什么不进行水平扩展呢？<br>OK，我们选用水平扩展来提升网站，但又需要怎么做呢？</li>
</ul>
<h3 id="1-单一服务器"><a href="#1-单一服务器" class="headerlink" title="1. 单一服务器"></a>1. 单一服务器</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1dnqtex5gj30jg0bumxv.jpg" alt=""></p>
<p>这可能是你最初的架构。一台服务器既运行着业务，又存储着数据，简单又实用，但为了满足更高的要求，这种架构只能运行在性能更强的服务器上，这不是我们所希望的。</p>
<h3 id="2-增加反向代理"><a href="#2-增加反向代理" class="headerlink" title="2. 增加反向代理"></a>2. 增加反向代理</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1dnxk7if8j30jg0alwf6.jpg" alt=""></p>
<p>为了应付大流量，你第一步需要做的是增加反向代理。就像是酒店的前台，你可以让客人直接到他的客房，但事实上，你需要一位大堂经理，判断客人是否可以进入，是否已经提前预定好客房，如果客房已满，你应该友好地告知客人，而不是让客人自己挨个去查看。这个例子很好的解释了反向代理，反向代理通常只是接收与转发请求，然后这些请求在处理完成后从我们的服务器返回给用户。当用户向服务器发起请求时，这些请求需要路由到我们的服务器上，所以我们称之为“反向代理”。</p>
<p>反向代理的作用如下：</p>
<ul>
<li>可用性检查。确保我们的服务正常运行</li>
<li>路由。转发请求到正确的处理终端</li>
<li>鉴权。确保用户有权限访问服务</li>
<li>防火墙。确保仅被授权的用户可以访问</li>
</ul>
<h3 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1doii7p2zj30jg0csgmn.jpg" alt=""></p>
<p>大多数的反向代理服务器还有一个作用：负载均衡。负载均衡是一个较为简单的概念：想象一下，有100个用户准备在限定的时间内进行支付，不幸的是，你的支付服务只能同时处理50笔交易，该怎么解决呢？你只需要同时运行两台支付服务就可以了。</p>
<p>负载均衡服务器现在需要将支付请求分流到两台服务器上，用户A的支付在S1上处理，用户B的支付在S2上处理，用户C的支付在S3上处理……</p>
<p>如果同时有500个用户发起支付请求该怎么办呢？没错！你只需将支付服务器扩展到10台来分发处理这些请求即可。</p>
<h3 id="4-增强数据库"><a href="#4-增强数据库" class="headerlink" title="4. 增强数据库"></a>4. 增强数据库</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1doshmdyij30jg0bwwfh.jpg" alt=""></p>
<p>负载均衡可以将用户的请求在多台服务器进行处理，但你注意到其中的问题了吗？我们可以扩展几十台、几百台甚至几千台服务器来处理请求，但所有的数据都储存在了同一个数据库中。</p>
<p>所以，我们可以用同样的办法来扩展数据库吗？答案是 No！这里涉及到了数据一致性的问题。我们需要保证系统所使用的数据是一致的，不一致的数据会导致一系列的问题，比如：同一个订单被多次处理，我们从一个100元的账户进行了两次扣款操作……那我们又该如何调整数据库来确保数据的一致性呢？</p>
<p>首先我们要做的就是将数据库功能拆分，一部分只负责接收与存储数据，其他部分只进行数据的检索。这种解决方案被称为主从复制或者读写分离。假设数据被读取的频率高于写入频率，我们可以将数据一处写入，多处读取（被读取的数据是写入数据的副本）。这里的缺点是我们只能在一处写入数据，这对于中小型网站来说没有问题，但不适用 Facebook 这样的网站，我们将在第9章进一步讨论如何扩展这样级别的数据库。</p>
<h3 id="5-微服务"><a href="#5-微服务" class="headerlink" title="5. 微服务"></a>5. 微服务</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1dpdetz6uj30jg0c3wfw.jpg" alt="Microservices"></p>
<p>到现在为止，我们还是用一台服务器来处理所有的事情：处理支付、订单、库存查询、网站运行、管理账户等。</p>
<p>这或许不是件坏事——单一服务器意味着更低的复杂度、也更利于开发人员。但随着服务器的扩展，事情开始变得复杂与低效：</p>
<ul>
<li>不同服务器处理相同的事情——对每个登陆的用户而言，可能有几百个页面需要处理，但这些都是由同一个服务器完成的。</li>
<li>开发团队随着业务扩张——随着越来越多的开发者在同一台服务器上工作，冲突也越来越多</li>
<li>单一服务器意味着当我们想要完成新版本的迭代时，必须完成所有的工作。当一个团队想要快速发布更新时，由于依赖的另一个团队只完成了一半，导致了危险的相互依赖性。</li>
</ul>
<p>微服务的出现很好的解决了这些问题。微服务的概念很简单——将你的服务以功能单元进行拆分，并进行独立部署。微服务具有以下优点：</p>
<ul>
<li>每个服务能都被独立扩展，让我们能更加灵活地调整以适应业务发展（<em>译者注：比如邀请注册的网站限时开放注册，此时有大量的注册请求，我们可以扩展注册账户服务器的处理能力；当双十一进行大量支付处理时，我们可以扩展支付系统的处理能力，活动结束后，再将处理能力进行恢复，此为弹性扩容</em>）</li>
<li>运维团队能够独立处理各功能单元，他们能负责微服务的整个生命周期（创建、部署、升级等）</li>
<li>每个微服务可以使用所需资源。如第4章那样，需要数据库的扩展</li>
</ul>
<h3 id="6-缓存与CDN"><a href="#6-缓存与CDN" class="headerlink" title="6. 缓存与CDN"></a>6. 缓存与CDN</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1dq9od5rcj30jg0c8abp.jpg" alt=""></p>
<p>有什么比工作更高效的方法吗？（What’s better than working more efficiently?）答案是什么都不做！我们所使用的网站或APP由大量的静态资源所组成，如图片、JavaScript 和 CSS 文件，某些产品的预渲染登陆页等。相对于在每次请求时重新计算或者重新生成这些资源，我们使用“缓存”来加速响应并节约服务器资源——缓存记录最新的结果，并直接返回给再次请求的用户。</p>
<p>大型的缓存服务被称为CDN（Content Delivery Network，内容分发网络）——大量的缓存内容被存放在世界各地。CDN能让用户就近快速获取到所需资源，而不需要每次跨越千山万水到中央服务器获取。</p>
<h3 id="7-消息队列"><a href="#7-消息队列" class="headerlink" title="7. 消息队列"></a>7. 消息队列</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1dqm3ll8uj30jg0bdjsz.jpg" alt="Message Queues"></p>
<p>你去过游乐场吗？是不是经常需要排队购票呢？地铁闸机口、银行柜台、游乐场售票处都是解释“子容量并行性”（sub-capacity parallelism）概念非常好的例子。没错，他们都是并行处理的：多个售票窗口同时售票，但他们又无法同时为每个人服务，因此，在每个窗口后开了排队。</p>
<p>同样的，在大型网站中。每分钟有成百上千的图片上传到 Instagram、Facebook，每张图片都需要被处理、裁剪、分析与打标签（<em>译者注：如反恐扫黄系统</em>），这是非常耗时的。所以，与其让用户等待图片上传完成及所有的处理过程，不如服务器在接收到图片后再做以下三件事：</p>
<ul>
<li>存储原始图片，不做任何处理</li>
<li>向用户返回图片上传成功</li>
<li>对待处理图片增加标识，指定待处理部分</li>
</ul>
<p>其他服务通过检索待处理标识来逐一处理，直到完成所有待处理任务。管理这样任务的系统被称为“消息队列”。使用消息队列有很多好处：</p>
<ul>
<li>将任务与处理异步化。有时许多图片需要被处理，有时只有几张；有时有很多CPU资源可用，有时却只有部分CPU资源可用。通过将待处理任务堆积，而不是直接处理，我们可以确保我们的系统可用性，而且任务不会丢失。</li>
<li>缓冲请求，扩展处理资源。当有大量用户上传图片时，我们需要时间来调拨更多的处理资源，如果没有消息队列，可能直接导致宕机。相反，有消息队列系统时，我们可以将请求添加到任务队列中，在处理资源到位后再进行处理，保证网站的可用性。</li>
</ul>
<blockquote>
<p>好了，现在我们的网站可以承受相当大的流量请求了，但如果我们想要承受更大的流量该怎么做？好吧，我们还需要做以下的一些工作：</p>
</blockquote>
<h3 id="8-分片"><a href="#8-分片" class="headerlink" title="8. 分片"></a>8. 分片</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1drnb6tzij30jg0bf0tz.jpg" alt=""></p>
<p>什么是分片呢？“分片是一种通过将服务拆分为多个单元来并行处理的一种技术，每个单元只负责某些部分”（”Sharding is a technique of parallelizing an application’s stacks by separating them into multiple units, each responsible for a certain key or namespace”）</p>
<p>所以，到底什么是分片呢？分片其实是一个非常简单的概念：想要像 Facebook 那样服务20亿用户？将你的架构改造成类似于26个 mini 版的 Facebook，每个用户通过不同的英语字母表来区分。Aaron Abrahams？应该被A服务器处理；Zacharias Zuckerberg? 应该被Z服务器处理……</p>
<p>分片不仅仅基于字母，也可以基于数字或者其他规则，如位置、使用频率等。你可以分片你的服务器、数据库或者其他服务资源，这完全取决于你的业务需要。</p>
<blockquote>
<p><em>译者注：分片技术，简而言之，就是将功能模块进行打包复制，类似于第3章的方案，提高并行处理能力。</em></p>
</blockquote>
<h3 id="9-DNS"><a href="#9-DNS" class="headerlink" title="9. DNS"></a>9. DNS</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1dsbsehduj30jg0bfmyg.jpg" alt=""></p>
<p>到目前为止，你部署了单一的负载均衡服务器——即使你花费高昂的价格购买了性能更强劲的服务器，由于硬件的物理限制，仍然难以满足大量的请求。幸运的是，在世界范围内，分布着一个在流量到达我们服务器前非常稳定的负载均衡工具——DNS(Domain Name System，域名系统)。该系统能将域名”arcentry.com”映射到具体的网络地址（IP），如143.204.47.77，该系统也允许我们为同一个域名指定多个不同的IP，从而在不同的机器上处理相同请求。</p>
<blockquote>
<p>非常感谢你能耐心看到这里，我希望这篇文章能对你有些用处。但是，如果你是IT从业人员，或许你在读了这篇文章后，又想到了一个困扰你很久的问题：什么是云服务？</p>
</blockquote>
<h1 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h1><p>云服务又是什么呢？已经2018年了，解决上述许多问题的最便宜和最有效的办法很明显：不用亲自解决！相反，由你的云服务提供商来为你扩展系统，而无需亲自处理这些问题，你只需关注自身业务。（<em>译者注：据统计显示，目前中国有40%的网站在阿里云托管，最近的阿里云事故导致大量的企业受损，这对一些小型企业来说，是灭顶之灾，因此如果自身有能力，还是要掌控局面，毕竟数据无价，如果必须选择云服务商，在选择靠谱的服务商外，不要把鸡蛋放在一个篮子里</em>）</p>
<p>以我的网站为例，我不需要做以上扩展的任何事情（除了数据的读写分离），只需要将网站托管在AWS上，没有服务器，没有烦恼。</p>
<p>但云服务也不是银弹，它也有自身一些问题与权衡。请继续关注本系列的下篇文章，以了解有关“面向新手与非技术人员云服务”的更多信息。</p>
<hr>
<blockquote>
<p>个人总结：应对大规模流量的处理层级为：DNS ==&gt; CDN缓存 ==&gt; 负载均衡服务器 ==&gt; 消息队列 ==&gt; 容器集群 ==&gt; 分片 ==&gt; 数据库读写分离</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 终端环境配置]]></title>
      <url>https://blog.palemoky.top/2019/02/28/Mac-%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>语法高亮<br>zsh-syntax-highlighting<br>brew install zsh-syntax-highlighting<br>.zshrc 添加 source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>
<p>zsh-autosuggestions<br>bew install zsh-autosuggestions<br>.zshrc 添加 source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh</p>
<p>autojump<br>brew install autojump<br>.zshrc 添加 [ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</p>
<p>PhpStorm 无法默认使用zsh<br>Setting -&gt; Tools -&gt; Terminal -&gt; Shell path</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 根据网络环境自动切换应用]]></title>
      <url>https://blog.palemoky.top/2019/02/28/Mac-%E6%A0%B9%E6%8D%AE%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>项目地址<br><a href="https://github.com/Jeff2Ma/launchd-with-networkchange/blob/master/readme.zh.md" target="_blank" rel="noopener">https://github.com/Jeff2Ma/launchd-with-networkchange/blob/master/readme.zh.md</a></p>
<p>切记每次修改配置文件 dynamic.sh 均需要 unload 再 load plist</p>
<p>脚本命令<br><a href="https://www.jianshu.com/p/d42dff738d70" target="_blank" rel="noopener">https://www.jianshu.com/p/d42dff738d70</a></p>
<p>AppleScript 脚本入门<br><a href="https://sspai.com/post/46912" target="_blank" rel="noopener">https://sspai.com/post/46912</a></p>
<p>文本操作命令<br>经常你需要从剪切板或者文件中获取某些文本，并对这些文本进行转换和使用，这里列举的命令都是跟文本处理相关的</p>
<p>统计剪贴板中文本的行数</p>
<p>pbpaste | wc -l<br>统计剪贴板中文本的单词数</p>
<p>pbpaste | wc -w<br>对剪贴板中的文本行进行排序后重新写回剪贴板</p>
<p>pbpaste | sort | pbcopy<br>对剪贴板中的文本行进行倒序后放回剪贴板</p>
<p>pbpaste | rev | pbcopy<br>移除剪贴板中重复的文本行，然后写回剪贴板</p>
<p>pbpaste | sort | uniq | pbcopy<br>找出剪贴板中文本中存在的重复行，并复制后写回剪贴板（包含重复行的一行）</p>
<p>pbpaste | sort | uniq -d | pbcopy<br>找出剪贴板中文本中存在的重复行，并复制后写回剪贴板（不包含重复行）</p>
<p>pbpaste | sort | uniq -u | pbcopy<br>对剪贴板中的 HTML 文本进行清理后写回剪贴板</p>
<p>pbpaste | tidy | pbcopy<br>显示剪贴板中文本的前 5 行</p>
<p>pbpaste | head -n 5<br>显示剪贴板中文本的最后 5 行</p>
<p>pbpaste | tail -n 5<br>将剪贴板中文本里存在的 Tab 跳格符号转成空格</p>
<p>pbpaste | expand | pbcopy</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[supervisor启动服务失败]]></title>
      <url>https://blog.palemoky.top/2019/02/26/supervisor-ERROR-spawn-error-%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>起因<br>最近一个多月 MBP 每天下午不定时突然重启，所幸每次重启后的不受影响，正好项目也比较紧张，也就忍忍先赶项目了，期间联系了 Apple 在线客服，但总是让我升级系统重试，上周正好项目上线了，赶紧抓紧时间预约了周五下午的天才吧，到了之后告诉我由于过保，检测费用300元，需要48小时的检测时间，同时需要告知售后开机密码。我一听就不干了，周一能不能干活先不说，把密码告诉你，那我银行卡的两块五没了怎么办？！</p>
<p>由于这个问题是最近出现的，因此我判断不是硬件的问题，只要是软件的问题就好说，直接拿出大招——重装系统。虽说格盘前已经尽可能的备份了自己能想到的所有文件，但总是会有些遗漏的地方，比如 docker 镜像</p>
<p>正文<br>重新安装完系统后，从同事那里拷贝过来了 docker 镜像，但启动容器后无法正常发起请求，进入容器使用命令<code>supervisorctl status</code>看到 nginx 没有启动，遂使用命令<code>supervisorctl start nginx</code>启动 nginx，但提示 <code>supervisor ERROR (spawn error)</code>，虽然有错误提示，但这样的提示对我来说就是没有提示，然后使用命令<code>supervisorctl tail nginx stdout</code>进一步查看信息，终于发现是由于相关的日志文件没有权限导致 nginx 服务无法正常启动，通过对比 MySQL 服务发现，nginx 服务用 work 账户执行，但日志文件的所有者和所属组却是 root，难怪会没有权限，于是使用<code>chown</code>和<code>chgrp</code>命令将日志文件的所有者与所属组更正，再次执行<code>supervisorctl start nginx</code>后，nginx 正常启动了。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行Json工具]]></title>
      <url>https://blog.palemoky.top/2019/02/19/%E5%91%BD%E4%BB%A4%E8%A1%8CJson%E5%B7%A5%E5%85%B7/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[软件推荐]]></title>
      <url>https://blog.palemoky.top/2018/07/06/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<p>今天又搜罗了不少优秀的软件，为了防止遗忘，特别记录一下。</p>
<a id="more"></a>
<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="1-Notebook"><a href="#1-Notebook" class="headerlink" title="1. Notebook"></a>1. <a href="https://www.zoho.com/notebook/notebook-for-mac.html" target="_blank" rel="noopener">Notebook</a></h2><p>这是一款非常漂亮的笔记本，虽然我目前使用的是印象笔记和马克飞象，但我真的也非常喜欢这款笔记，我想我以后会尝试使用。<br><img src="https://www.zoho.com/notebook/images/mobile-inspired-gestures.png" alt="notebook"></p>
<h2 id="2-iPic"><a href="#2-iPic" class="headerlink" title="2. iPic"></a>2. <a href="http://toolinbox.net/iPic/" target="_blank" rel="noopener">iPic</a></h2><p>这是一款上传图片到各种图床的软件，对于经常使用 Markdown 写博客的用户来说，这简直就是福音，但坏消息是这款软件免费的只能使用微博图床，其他的图床都是是付费的。<br><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fewqw208xmg30j60aske8.gif" alt="ipic"></p>
<h2 id="3-Mounty"><a href="#3-Mounty" class="headerlink" title="3. Mounty"></a>3. <a href="http://enjoygineering.com/mounty/" target="_blank" rel="noopener">Mounty</a></h2><p>由于 macOS 不支持 NTFS 的读写，因此通常需要使用 Paragon NTFS 或 Tuxera NTFS 来读写 NTFS 格式的磁盘，但这两款软件都是付费的，而免费版的 Mounty 同样能做到，因此我选择 Mounty。<br><img src="http://enjoygineering.com/mounty/img/example.png" alt="Mounty"></p>
<h2 id="4-iStat-Menus"><a href="#4-iStat-Menus" class="headerlink" title="4. iStat Menus"></a>4. <a href="https://github.com/Chris911/iStats" target="_blank" rel="noopener">iStat Menus</a></h2><p>一款实时查看电脑运行状态的工具，包括 CPU、硬盘、电池、网络等。<br><img src="http://ohx73ws1b.bkt.clouddn.com/istat.png" width="400"></p>
<h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><h2 id="1-httpie"><a href="#1-httpie" class="headerlink" title="1. httpie"></a>1. httpie</h2><p>一款终端高亮格式化显示的http解析工具<br><img src="https://raw.githubusercontent.com/jakubroztocil/httpie/master/httpie.png" alt="httpie"></p>
<h2 id="2-mycli"><a href="#2-mycli" class="headerlink" title="2. mycli"></a>2. mycli</h2><p>一款自动完成终端 MySQL 命令高亮与提示的工具<br><img src="https://raw.githubusercontent.com/dbcli/mycli/master/screenshots/main.gif" alt="mycli demo"></p>
<h1 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h1><h2 id="1-Octotree"><a href="#1-Octotree" class="headerlink" title="1. Octotree"></a>1. <a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener">Octotree</a></h2><p>Github 侧边栏目录结构<br><img src="http://upload-images.jianshu.io/upload_images/1094967-b6c0f72ef039a5c2?imageMogr2/auto-orient/strip" alt="octotree"></p>
<h2 id="2-GitHub-Hovercard"><a href="#2-GitHub-Hovercard" class="headerlink" title="2. GitHub Hovercard"></a>2. <a href="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk" target="_blank" rel="noopener">GitHub Hovercard</a></h2><p>鼠标悬停显示更多信息，包括用户的摘要信息、commit 的摘要信息等<br><img src="http://upload-images.jianshu.io/upload_images/1094967-335a21063edfa79d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub Hovercard"><br><img src="http://upload-images.jianshu.io/upload_images/1094967-a11d109a7a6ac19b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="repo"></p>
<h2 id="3-Isometric-Contributions"><a href="#3-Isometric-Contributions" class="headerlink" title="3. Isometric Contributions"></a>3. <a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien?hl=zh-CN" target="_blank" rel="noopener">Isometric Contributions</a></h2><p>3D 显示用户的仓库提交历史<br><img src="http://upload-images.jianshu.io/upload_images/1094967-c7e914bc8cc17bfd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commit record"></p>
<hr>
<p>查看更多 Mac 精品软件可前往 <a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="noopener">Awesome Mac</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 效率神器 - Alfred]]></title>
      <url>https://blog.palemoky.top/2018/07/06/Mac-%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8-Alfred/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_thumbnail.jpg" alt="thumbnail"></p>
<a id="more"></a>
<p>21世纪最重要的是什么？效率啊！今天我们就来讲一款让你效率提升300%的神器 Alfred，上图就是它的样子。Are you kidding me?! 就一个搜索框就能提升300%的效率？这不就是 OS X 自带的 Spotlight 嘛，你比罗永浩还能吹！别急，别急，待我慢慢道来。</p>
<h1 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h1><h2 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1. 搜索引擎"></a>1. 搜索引擎</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_1.gif" alt="Web Search"></p>
<h2 id="2-打开文件"><a href="#2-打开文件" class="headerlink" title="2. 打开文件"></a>2. 打开文件</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_2.gif" alt="Open File"></p>
<h2 id="3-打开应用"><a href="#3-打开应用" class="headerlink" title="3. 打开应用"></a>3. 打开应用</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_3.gif" alt="Applicatioin"></p>
<h2 id="4-查找文件"><a href="#4-查找文件" class="headerlink" title="4. 查找文件"></a>4. 查找文件</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_4.gif" alt="Find File"></p>
<h2 id="5-计算器"><a href="#5-计算器" class="headerlink" title="5. 计算器"></a>5. 计算器</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_5.gif" alt="Calculator"></p>
<h1 id="进阶应用"><a href="#进阶应用" class="headerlink" title="进阶应用"></a>进阶应用</h1><h2 id="1-自定义搜索"><a href="#1-自定义搜索" class="headerlink" title="1. 自定义搜索"></a>1. 自定义搜索</h2><p>在搜索框中输入「Alfred」回车，依次点击 Features -&gt; Web Search<br><br>以下是我的一些自定义搜索配置，安装 Alfred 软件后打开下列「alfred://」开头的 URL 即可自动添加</p>
<blockquote>
<p>Docker Hub alfred://customsearch/Docker%20Store/ds/utf8/nospace/https%3A%2F%2Fstore.docker.com%2Fsearch%3Fq%3D%7Bquery%7D</p>
<p>GitHub<br>alfred://customsearch/GitHub/github/utf8/nospace/https%3A%2F%2Fgithub.com%2Fsearch%3Fq%3D%7Bquery%7D%26ref%3Dopensearch</p>
<p>PHP 中文手册<br>alfred://customsearch/PHP%20Manual/p/utf8/nospace/http%3A%2F%2Fphp.net%2Fsearch.php%3Fshow%3Dquickref%26pattern%3D%7Bquery%7D</p>
<p>MDN 手册<br>alfred://customsearch/MDN%20Web%20Docs/mdn/utf8/nospace/https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fsearch%3Fq%3D%7Bquery%7D</p>
<p>StackOverflow<br>alfred://customsearch/StackOverflow/so/utf8/nospace/http%3A%2F%2Fstackoverflow.com%2Fsearch%3Fq%3D%7Bquery%7D</p>
<p>Google 翻译为中文<br>alfred://customsearch/Google%E7%BF%BB%E8%AF%91%E4%B8%AD%E6%96%87/g2cn/utf8/nospace/https%3A%2F%2Ftranslate.google.com%2F%23auto%2Fzh-CN%2F%7Bquery%7D</p>
<p>Google 翻译为英文<br>alfred://customsearch/Google%20%E7%BF%BB%E8%AF%91%E8%8B%B1%E6%96%87/g2en/utf8/nospace/https%3A%2F%2Ftranslate.google.com%2F%23auto%2Fen%2F%7Bquery%7D</p>
</blockquote>
<h2 id="2-历史剪切板"><a href="#2-历史剪切板" class="headerlink" title="2. 历史剪切板"></a>2. 历史剪切板</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_6.gif" alt="Clipbord"></p>
<h2 id="3-代码片段"><a href="#3-代码片段" class="headerlink" title="3. 代码片段"></a>3. 代码片段</h2><p>我们经常会输入手机号、邮箱、身份证号等常用信息，程序员可能会有一些常用代码，每次手动输入不仅麻烦，而且经常输错，现在，用「Snippets」功能来拯救你吧。比如，我以关键字「demo」作为”Hello world”的关键字，依次点击 Features-&gt;Snippets，按照图示设置即可<br><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_setting.jpg" alt="Snippets"><br>最终的效果就是这样的：<br><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_7.gif" alt="Snippets"></p>
<p>如果你想每次都输出不同内容时，就需要用到占位符了，比如我想输出当前时间，你可以这样<br><img src="http://inews.gtimg.com/newsapp_match/0/2868860882/0" alt=""><br>时间的格式不是你想要的？在系统设置中的地区与语言中自定义你的时间吧:)</p>
<h2 id="4-系统命令"><a href="#4-系统命令" class="headerlink" title="4. 系统命令"></a>4. 系统命令</h2><p>Alfred 支持多个系统命令，如 lock 锁定电脑，emptytrash 清空回收站，restart 重启电脑，quit 退出指定应用等，这些都可以在 Features-&gt;System 中查看及设置。个人不太推荐使用 lock 和 emptytrash 以外的命令，使用第三方程序来关机或退出应用可能会导致一些意外情况，比如我昨天使用 quit iterm2 导致composer 命令无法执行，zsh 中加载了composer 的插件，最终导致整个终端都无法正常使用。</p>
<h2 id="5-执行终端命令"><a href="#5-执行终端命令" class="headerlink" title="5. 执行终端命令"></a>5. 执行终端命令</h2><p>Alfred 默认调用系统内置的 Terminal，可在 Features-&gt;Terminal/Shell 中参照<a href="https://github.com/stuartcryan/custom-iterm-applescripts-for-alfred修改配置，将" target="_blank" rel="noopener">https://github.com/stuartcryan/custom-iterm-applescripts-for-alfred修改配置，将</a> Terminal 修改为 iTerm2。</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_8.gif" alt="Terminal"></p>
<h1 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h1><p>Alfred 真正的黑科技是 workflow，话不所说，直接上图：</p>
<h2 id="1-翻译"><a href="#1-翻译" class="headerlink" title="1. 翻译"></a>1. 翻译</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_9.gif" alt="Translate"></p>
<h2 id="2-时间戳转换"><a href="#2-时间戳转换" class="headerlink" title="2. 时间戳转换"></a>2. 时间戳转换</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_10.gif" alt="Timestamp Convert"></p>
<h2 id="3-色值转换"><a href="#3-色值转换" class="headerlink" title="3. 色值转换"></a>3. 色值转换</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_11.gif" alt="Color Show"></p>
<h2 id="4-Hash"><a href="#4-Hash" class="headerlink" title="4. Hash"></a>4. Hash</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/alfred_12.gif" alt="Hash"></p>
<p>我使用的 workflow 已上传至百度云盘，链接:<a href="https://pan.baidu.com/s/1eVyVe7DR9_NH_9vqafys9w" target="_blank" rel="noopener">https://pan.baidu.com/s/1eVyVe7DR9_NH_9vqafys9w</a>  密码:c1z9</p>
<hr>
<p>参考文章：<br><img src="https://kuaibao.qq.com/s/20180211A01CU900?refer=cp_1026%200%20%E5%88%86%E4%BA%AB%20%20%E6%89%AB%E6%8F%8F%E4%BA%8C%E7%BB%B4%E7%A0%81" alt="Mac效率神器Alfred系列教程-Snippets文字扩展"></p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行下使用代理]]></title>
      <url>https://blog.palemoky.top/2017/07/08/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/proxy.png" alt="proxy"></p>
<a id="more"></a>
<p>对于经常需要依赖国外资源的开发者，终端的下载速度让人抓狂，诸如常见的 wget、curl、git、brew 等命令行工具超慢，甚至无法获取资源，这就需要搭建一个科学上网利器，例如目前流行的shadowsocks，我们配置好 shadowsocks 服务器端后，安装对应系统的客户端便可，然而当你构建的时候还是会很慢，这时你发现系统自带的终端或 iTerm 2 是不走 Socks5 。</p>
<p>因在终端下不支持Socks5代理，只支持http代理，这就需要曲径通幽了。</p>
<h1 id="Mac平台下安装"><a href="#Mac平台下安装" class="headerlink" title="Mac平台下安装"></a>Mac平台下安装</h1><blockquote>
<p>环境：<br>OS X 10.12.5<br>ShadowsocksX-NG 1.5.0</p>
</blockquote>
<p>OS X 10.11之后较新的系统默认设置下不会安装成功。苹果在新系统中加入了SIP安全机制，他会阻止第三方程序向系统目录内（/System，/bin，/sbin，/usr(除了/usr/local)）进行写操作，sudo也不行。办法是先把SIP关了，等装好软件配置好后再打开SIP。或者改用其他软件。</p>
<p>关闭SIP也麻烦，遂用privoxy这个经典软件，它刚好就是安装在/usr/local内，不需要关闭SIP也可以正常使用。</p>
<h3 id="1-privoxy安装"><a href="#1-privoxy安装" class="headerlink" title="1. privoxy安装"></a>1. privoxy安装</h3><p><code>brew install privoxy</code></p>
<h3 id="2-privoxy配置"><a href="#2-privoxy配置" class="headerlink" title="2. privoxy配置"></a>2. privoxy配置</h3><p><code>vim /usr/local/etc/privoxy/config</code><br>在文件末尾输入：</p>
<pre><code>listen-address 0.0.0.0:8118
forward-socks5 / localhost:1086 .
</code></pre><p>第一行设置privoxy监听任意IP地址的8118端口(privoxy的默认端口)。第二行设置本地socks5代理客户端端口，注意不要忘了最后有一个空格和点号。<br><em>旧版 ShadowsocksX 创建的 「SOCKS5 代理」端口 默认是 1080，新版 ShadowsocksX-NG 创建的 「SOCKS5 代理」端口 默认改成 1086 升级后别忘了修改代理插件对应的端口。</em></p>
<h3 id="3-启动privoxy"><a href="#3-启动privoxy" class="headerlink" title="3. 启动privoxy"></a>3. 启动privoxy</h3><p>因为没有安装在系统目录内，所以启动的时候需要打全路径。<br><code>sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</code></p>
<h3 id="4-测试shadowsocks"><a href="#4-测试shadowsocks" class="headerlink" title="4. 测试shadowsocks"></a>4. 测试shadowsocks</h3><pre><code>telnet 127.0.0.1 1086
telnet 127.0.0.1 8118
</code></pre><h3 id="5-privoxy使用"><a href="#5-privoxy使用" class="headerlink" title="5. privoxy使用"></a>5. privoxy使用</h3><p>在<code>~/.bashrc</code>或<code>~/zshrc</code>中加入以下开关函数，方便使用：</p>
<pre><code>function proxy_off(){
    unset http_proxy
    unset https_proxy
    echo -e &quot;已关闭代理&quot;
}

function proxy_on() {
    export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;
    export http_proxy=&quot;http://127.0.0.1:8118&quot;
    export https_proxy=$http_proxy
    echo -e &quot;已开启代理&quot;
}
</code></pre><p>执行<code>source ~/.bashrc</code>或<code>source ~/.zshrc</code>使配置立即生效。</p>
<h3 id="7-开启代理测试"><a href="#7-开启代理测试" class="headerlink" title="7. 开启代理测试"></a>7. 开启代理测试</h3><pre><code>~  proxy_on
已开启代理
~  curl ip.cn
当前 IP：8.8.8.8 来自：美国
</code></pre><h1 id="Linux下的安装"><a href="#Linux下的安装" class="headerlink" title="Linux下的安装"></a>Linux下的安装</h1><blockquote>
<p>环境：<br>CentOS 7.3.1611</p>
</blockquote>
<h3 id="1-安装shadowsocks、pip、privoxy"><a href="#1-安装shadowsocks、pip、privoxy" class="headerlink" title="1. 安装shadowsocks、pip、privoxy"></a>1. 安装shadowsocks、pip、privoxy</h3><p>请先确保你已经添加了EPEL源，<code>yum repolist</code></p>
<pre><code>[root@localhost ~]# yum repolist
已加载插件：fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.nju.edu.cn
 * elrepo: mirrors.ircam.fr
 * epel: mirrors.tuna.tsinghua.edu.cn
 * extras: mirrors.njupt.edu.cn
 * updates: mirrors.njupt.edu.cn
源标识           源名称                                                状态
base/7/x86_64    CentOS-7 - Base                                        9,363
elrepo           ELRepo.org Community Enterprise Linux Repository - el    194
epel/x86_64      Extra Packages for Enterprise Linux 7 - x86_64        11,873
extras/7/x86_64  CentOS-7 - Extras                                        446
updates/7/x86_64 CentOS-7 - Updates                                     2,089
repolist: 23,965
</code></pre><p>如果尚未添加，则使用<code>sudo yum -y install epel-release</code>添加EPEL。</p>
<p>使用以下命令安装shadowsocks、pip、privoxy：<br><code>$ sudo yum -y install python-pip privoxy</code><br><code>$ sudo pip install shadowsocks</code></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-配置ss"><a href="#2-1-配置ss" class="headerlink" title="2.1 配置ss"></a>2.1 配置ss</h4><p><code>$ sudo mkdir -p /etc/shadowsocks</code><br><code>$ sudo vi /etc/shadowsocks/config.json</code><br>config.json配置内容为：</p>
<pre><code>{
 &quot;server&quot;:&quot;bot02.rom.mk&quot;,（你的代理服务器IP或域名地址）
 &quot;server_port&quot;:443,（代理服务器上监听的端口号）
 &quot;local_port&quot;:1080,（本地的监听端口号）
 &quot;password&quot;:&quot;xxxx&quot;,（代理服务器的密码）
 &quot;timeout&quot;:600,
 &quot;method&quot;:&quot;aes-256-cfb（加密方式）&quot;
 }
</code></pre><p><em>若未配置local_port，则默认为1080</em></p>
<h4 id="2-2-启动ss"><a href="#2-2-启动ss" class="headerlink" title="2.2 启动ss"></a>2.2 启动ss</h4><p>后台运行shadowsocks：<br>启动：<code>sslocal -c /etc/shadowsocks/config.json -d start</code><br>停止：<code>sslocal -c /etc/shadowsocks/config.json -d stop</code></p>
<p>但这样每次重启系统的时候都需要执行启动命令来启动ss，我们可以通过以下方法设置开机自动启动：<br><code>vi /usr/lib/systemd/system/sslocal.service</code><br>内容如下：</p>
<pre><code class="json">[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
PermissionsStartOnly=true
ExecStartPre=/bin/mkdir -p /run/shadowsocks
ExecStartPre=/bin/chown nobody:nobody /run/shadowsocks
ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/config.json
Restart=on-abort
User=root
Group=root
UMask=0027

[Install]
WantedBy=multi-user.target
</code></pre>
<p>执行命令<code>systemctl start sslocal</code>启动ss，<br>执行命令<code>systemctl status sslocal</code>查看ss状态，如果是<code>active</code>，执行<code>systemctl enable sslocal</code>设置开机自启。<br>执行<code>reboot</code>重启系统，然后使用<code>systemctl status sslocal</code>查看启动情况，如有异常请根据日志提示解决。</p>
<p>这样我们就能很方便的通过系统命令<code>systemctl</code>来管理ss进程了。</p>
<h4 id="2-2-privoxy配置"><a href="#2-2-privoxy配置" class="headerlink" title="2.2 privoxy配置"></a>2.2 privoxy配置</h4><p><code>$ sudo vi /etc/privoxy/config</code><br>在文件末尾输入：<br><code>forward-socks5 / 127.0.0.1:1080 .</code></p>
<p>启动privoxy<br><code>$ sudo service privoxy restart</code></p>
<p>同样的，执行<code>systemctl enable privoxy</code>设置开机启动privoxy</p>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>参照Mac下的配置设置开关函数。<br>使用Telnet测试shadowsocks和privoxy是否正常<br><code>telnet 127.0.0.1 1080</code><br><code>telnet 127.0.0.1 8118</code><br>可以连接成功说明正常运行。</p>
<p>执行以下命令查看实际效果</p>
<pre><code>~  proxy_on
已开启代理
~  curl ip.cn
当前 IP：8.8.8.8 来自：美国
~  proxy_off
已开启代理
~  curl ip.cn
当前 IP：121.69.50.42 来自：北京市 电信通
</code></pre><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>我们终端中的http和https请求通过开关函数转发到了privoxy的8118端口，然后被privoxy转换为socks5协议转发到shadowsocks的1080或1086端口，最后本地运行的shadowsocks客户端与远程shadowsocks服务器通信，从而实现命令下的代理功能。</p>
<hr>
<p>参考文章：</p>
<ol>
<li><a href="https://lvii.gitbooks.io/outman/content/ss.mac.html" target="_blank" rel="noopener">shadowsocks on Mac OS X</a></li>
<li><a href="http://www.cashqian.net/blog/001486989831982332565298e4942a2bb8f56b08f9d2475000" target="_blank" rel="noopener">Mac命令行终端下使用shadowsocks翻墙</a></li>
<li><a href="http://ian.wang/196.htm" target="_blank" rel="noopener">Shadowsocks+Privoxy打造Linux / Mac socks和http代理</a></li>
<li><a href="https://juejin.im/entry/58d29f6161ff4b006cb218d9" target="_blank" rel="noopener">使用 shadowsocks 加速 Mac 自带终端或 iTerm 2</a></li>
<li><a href="http://www.iosugar.com/2017/02/19/Mac-terminal-environment/" target="_blank" rel="noopener">Mac终端环境走代理</a></li>
<li><a href="http://www.guanxigo.com/cross-gfw-in-linux-terminal" target="_blank" rel="noopener">Linux终端下翻墙教程</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> Terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL保留字列表]]></title>
      <url>https://blog.palemoky.top/2017/06/07/SQL%E4%BF%9D%E7%95%99%E5%AD%97%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/SQL-1.png" alt="SQL"></p>
<a id="more"></a>
<p>SQL是由关键字组成的语言,关键字是一些用于执行SQL操作的特殊词汇词汇。在命名数据库、表、列和其他数据库对象时,一定不要使用这些关键字是一定要保留的。</p>
<p>本附录列出主要DBMS中最常用的保留字。请注意以下几点：</p>
<ul>
<li>关键字随不同的DBMS而变化,并非下面的所有关键字都被所有DBMS采用</li>
<li>许多DBMS扩展了SQL保留字,使其包含专门用于实现的术语。多数DBMS专用的关键字未列在下面。</li>
<li>为保证以后的兼容性和可移植性,应避免使用这些保留字,即使它们不不是你使用的DBMS的保留字。</li>
</ul>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/QQ20170607-103406.png" alt=""></p>
<hr>
<p>来源：《SQL必知必会》（第4版）</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL知识点总结]]></title>
      <url>https://blog.palemoky.top/2017/05/10/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/mysql.jpeg" alt=""></p>
<a id="more"></a>
<h2 id="一、-数据类型"><a href="#一、-数据类型" class="headerlink" title="一、 数据类型"></a>一、 数据类型</h2><p><img src="http://ohx73ws1b.bkt.clouddn.com/data%20type.png" alt="Alt text"></p>
<h3 id="1-1-选择优化的数据类型"><a href="#1-1-选择优化的数据类型" class="headerlink" title="1.1 选择优化的数据类型"></a>1.1 选择优化的数据类型</h3><ol>
<li>更小的通常最好：更小的数据占用更少的系统资源</li>
<li>使用内建的类型来存储合适的内容，如使用DATETIME或TIMESTAMP存储时间，而不是VARCHAR</li>
<li>尽量避免使用null，因为这会降低性能</li>
<li>TIMESTAMP只使用DATETIME的一半空间，并且会根据时区来自动更新，当TIMESTAMP设置默认值为CURRENT_TIMESTAMP和NOW()时，TIMESTAMP的值并不会随着更改某一字段而自动更改。</li>
</ol>
<h3 id="1-2-数据类型需要注意的"><a href="#1-2-数据类型需要注意的" class="headerlink" title="1.2 数据类型需要注意的"></a>1.2 数据类型需要注意的</h3><h4 id="1-2-1-数值型"><a href="#1-2-1-数值型" class="headerlink" title="1.2.1 数值型"></a>1.2.1 数值型</h4><ul>
<li>INT(11)其实并没有什么意义，它并不会限制数值的合法范围。</li>
<li><strong>DECIMAL类型主要用于存储精确的小数类型（如金额）</strong>，因为需要额外的空间和计算开销，因此只在对小数进行精确计算时才使用DECIMAL。</li>
<li>浮点类型在存储同样范围的值时，通常比DECIMAL使用更少的空间。</li>
</ul>
<h4 id="1-2-2-字符串型"><a href="#1-2-2-字符串型" class="headerlink" title="1.2.2 字符串型"></a>1.2.2 字符串型</h4><ul>
<li>VARCHAR使用更少的存储空间，但索引速度低于CHAR，VARCHAR需要额外的信息来保存长度信息。</li>
<li>使用VARCHAR(5)和VARCHAR(20)来存储’hello’的空间开销是一样的，但VARCHAR(20)会消耗更长的列，因此我们只分配真正需要的空间。</li>
<li><strong>使用枚举(ENUM)和SET代替字符串类型，在MySQL内部使用整数存储ENUM和SET类型，然后在做比较时转换为字符串</strong>。</li>
</ul>
<h4 id="1-2-3-日期时间型"><a href="#1-2-3-日期时间型" class="headerlink" title="1.2.3 日期时间型"></a>1.2.3 日期时间型</h4><ul>
<li>MySQL能存储的最小时间粒度为秒。</li>
<li><code>DATETIME([fsp])`</code>TIMESTAMP[(fsp)]<code></code>TIME[(fsp)]`可设定一个0~6位的微秒时间。</li>
<li>DATETIME能保存大范围的值，精度为秒，可保存1001~9999年。该类型存储与时区无关，使用8个字节的存储空间。</li>
<li>TIMESTAMP只使用4个字节的存储空间，因此只能保存1970~2038年，MySQL中也提供了FROM_UNIXTIME()函数把Unix时间戳转换为日期，并提供了UNIX_TIMESTAMP()函数将日期转换为Unix时间戳。</li>
<li>MySQL 4.1及以上版本按照DATETIME的方式格式化显示TIMESTAMP的值，这只是显示上的区别，与4.1前的版本在存储上并没有区别。</li>
<li>TIMESTAMP默认为NOT NULL</li>
</ul>
<h4 id="1-2-4-位数据型"><a href="#1-2-4-位数据型" class="headerlink" title="1.2.4 位数据型"></a>1.2.4 位数据型</h4><p>从MySQL 5.0开始，新增BIT数据类型，该类型可用于存储一个或多个true/false值，BIT(1)定义一个包含单个位的字段，BIT(2)存储2个位……BIT列的最大长度是64个位。但BIT类型应该谨慎使用，对于大部分应用，最好避免使用这种类型。</p>
<p>在数据表中，一旦选定了字段类型，就要确保在所有关联表中都使用同样的数据类型。</p>
<h3 id="1-3-数据表设计需注意的"><a href="#1-3-数据表设计需注意的" class="headerlink" title="1.3 数据表设计需注意的"></a>1.3 数据表设计需注意的</h3><ol>
<li>太多的列。过多的列（如数千个）会导致性能下降。</li>
<li>太多的关联。MySQL限制了每个关联操作最多只能有61张表。一个粗略的经验法则，如果希望查询执行得到快速且并发性好，单个查询最好在12个表以内做关联。</li>
<li>防止过度使用枚举（ENUM）。如：country enum(‘’,’0’,’1’,’2’,…,’31’)</li>
<li><strong>尽量避免使用null</strong>，建议尽可能使用替代方案。即使需要存储一个事实上的‘空值’时，可以使用0，空字符串或其他特殊值来代替。但也不要走极端，当确实需要表示未知值时，使用null也比使用奇怪的值好，比如使用全0作日期时间会导致很多问题，可以配置MySQL的SQL_MODE来禁止不可能的日期。</li>
</ol>
<h2 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h2><h3 id="2-1-基础命令"><a href="#2-1-基础命令" class="headerlink" title="2.1 基础命令"></a>2.1 基础命令</h3><ol>
<li>查询数据：<code>SELECT [DISTINCT] 字段 [AS 别名] FROM 表名 [JOIN 表名2 ON 条件] [WHERE 条件(LIKE|AND|OR|BETWEEN|IN|NOT IN|EXISTS|NOT EXISTS)] [GROUP BY 字段 [HAVING 条件]] [ORDER BY 字段 [DESC]] [LIMIT [OFFSET,]条数]；</code>（<strong>注意使用<code>GROUP BY</code>时所有的<code>SELECT</code>的字段都要列出</strong>）</li>
</ol>
<ul>
<li>在处理SQL语句时，所有的空格都会被忽略，因此SQL语句可以换行以增强易读性。</li>
<li>一般而言，除非你确实需要表中的每一列，否则最好别使用<code>*</code>通配符。虽然使用通配符能让你省事，但检索不需要的列会降低检索和应用程序的性能。</li>
<li><code>DESC</code>关键字只应用到直接位于其前面的列名。如果想在多个列上进行降序排序，必须对每一列指定<code>DESC</code>关键字。</li>
<li>确定值是否为<code>NULL</code>时，不能简单的检查是否= NULL，应该使用<code>IS NULL</code>。注意<code>NULL</code>与<code>&#39;&#39;</code>不同，<code>NULL</code>表示空值，而<code>&#39;&#39;</code>是一个值。</li>
<li><code>IN</code>操作符完成了与<code>OR</code>相同的功能。<code>IN</code>操作符的语法更清晰、直观。<code>IN</code>操作符一般比一组<code>OR</code>操作符执行的更快。</li>
<li>别名可以是一个单词或多个单词，多个单词时要在引号中，但别名最好用一个单词。<strong>表别名也可以实现自身的联表查询</strong>。</li>
<li>单条查询条件用<code>WHERE</code>，分组查询条件用<code>HAVING</code>，联表查询条件用<code>ON</code>。</li>
<li>联表查询时，联结的表越多，性能下降也越多。</li>
<li>组合查询（UNION）从查询结果集中自动去除了重复的行，使用<code>UNION ALL</code>，DBMS不取消重复的行。</li>
<li><code>UNION</code>几乎总是完成与多个<code>WHERE</code>条件相同的工作。<code>UNION ALL</code>为<code>UNION</code>的一种形式，它完成<code>WHERE</code>子句完成不了的工作。如果确实需要每个条件的匹配行全部出现（包括重复行），就必须使用<code>UNION ALL</code>，而不是<code>WHERE</code>。</li>
<li>在某些SQL中，<code>INSERT INTO</code>中的<code>INTO</code>是可选的，但为了保证SQL的移植性，最好不要省略该关键字。</li>
<li>MySQL中可以进行算数运算，如常见的加、减、乘、除。</li>
<li><strong>在数据表中，ID字段最好是自动生成的，以确保唯一、准确。</strong></li>
<li>无论是在编写SQL还是普通代码时，应该多加注释，注释并不会影响性能，但能让自己和别人更容易理解和更安全的修改代码。</li>
<li><code>EXISTS|NOT EXISTS (从句)</code>条件返回的是布尔值</li>
</ul>
<ol start="2">
<li>插入数据：<code>INSERT|REPLACE [IGNORE] INTO 表名(字段1，字段2) VALUES(值1，值2),(值1，值2) [ON DUPLICATE KEY UPDATE 字段=值];</code></li>
</ol>
<ul>
<li>如果某个字段是主键索引或唯一索引，普通的插入语句是会报错的，而使用关键词<code>IGNORE</code>则会警告，但不会影响正常的执行，重复数据仍然没有插入</li>
</ul>
<ol start="3">
<li>更新数据：<code>UPDATE 表名 SET 字段1=值1，字段2=值2 WHERE 条件;</code></li>
</ol>
<ul>
<li><strong><em>在<code>UPDATE</code>或<code>DELETE</code>语句使用<code>WHERE</code>子句前，应该先用<code>SELECT</code>进行测试，保证它过滤的是正确的记录，以防编写的<code>WHERE</code>子句不正确。</em></strong></li>
<li>如果DBMS支持禁止无<code>WHERE</code>的<code>UPDATE</code>和<code>DELETE</code>的执行，那最好启用它。</li>
</ul>
<ol start="4">
<li>删除数据：<code>DELETE FROM 表名 WHERE 条件;</code></li>
</ol>
<ul>
<li><code>DELETE</code>删除的是行，要删除列，使用<code>UPDATE</code>语句。</li>
<li>如果想从表中删除所有行，可以使用<code>TRUNCATE TABLE</code>语句来代替<code>DELETE</code>，它完成了相同的工作，但速度更快（因为不记录数据的变动）。</li>
</ul>
<h3 id="2-2-数据库"><a href="#2-2-数据库" class="headerlink" title="2.2 数据库"></a>2.2 数据库</h3><ol start="5">
<li>创建数据库：<code>CREATE DATABASE [IF NOT EXISTS] 数据库名;</code></li>
<li>删除数据库：<code>DROP DATABASE [IF EXISTS] 数据库名;</code></li>
<li>查看建库语句：<code>SHOW CREATE DATABASE 数据库名;</code></li>
<li>选择数据库：<code>USE 数据库名;</code></li>
<li>查看数据库：<code>SHOW DATABASES;</code></li>
<li>查看数据库信息：<code>STATUS;</code></li>
<li>设置命令行字符集：<code>SET NAMES UTF8;</code></li>
<li>查看数据表的最后修改时间：<code>select TABLE_NAME,UPDATE_TIME from INFORMATION_SCHEMA.tables where TABLE_SCHEMA=&#39;数据库名&#39;;</code></li>
</ol>
<h3 id="2-3-数据表"><a href="#2-3-数据表" class="headerlink" title="2.3 数据表"></a>2.3 数据表</h3><ol start="13">
<li>创建数据表：<code>CREATE TABLE [IF NOT EXISTS] 数据表名();</code></li>
</ol>
<ul>
<li><strong>为每一列设置默认值，使用<code>DEFAULT</code>而不是<code>NULL</code>。</strong></li>
</ul>
<ol start="14">
<li>查看建表语句：<code>SHOW CREATE TABLE 数据表名;</code></li>
<li>查看数据表：<code>SHOW TABLES;</code></li>
<li>查看当前数据库下数据表的自增ID值：<code>SHOW TABLE STATUS;</code></li>
<li>查看表结构：<code>DESC 表名;</code>或<code>SHOW COLUMNS FROM 表名;</code></li>
<li><p>删除数据表：<code>DROP TABLE [IF EXISTS] 数据表名;</code><br>-<strong>使用关系规则防止意外删除。</strong>许多DBMS允许强制实施有关规则，防止删除与其他表相关联的表。在实施这些规则时，如果对某个表发布一条<code>DROP TABLE</code>语句，且该表是某个关系的组成部分，则DBMS将阻止这条语句执行，直到该关系被删除为止。</p>
</li>
<li><p>修改表名：<code>RENAME TABLE 旧表名 TO 新表名;</code><br>####2.3.1 复制表结构和数据</p>
</li>
<li><strong>复制表结构：<code>CREATE TABLE 新表名 LIKE 原表名;</code></strong>(与原表结构相同，建表语句相同)</li>
<li><strong>复制表结构及数据到新表：<code>CREATE TABLE 表名 SELECT * FROM 表名;</code></strong>（注意该方式与原表的结构会有差异，建表语句不同，如自增会消失）</li>
<li>复制数据到另一张表（结构相同）：<code>INSERT INTO 表名 SELECT * FROM 表名;</code></li>
<li>复制数据到另一张表（结构不同）：<code>INSERT INTO 表名(字段1，字段2) SELECT 字段1，字段2 FROM 表名;</code></li>
<li>查看字段编码：<code>SHOW FULL COLUMNS FROM 表名;</code></li>
</ol>
<h3 id="2-4-其它"><a href="#2-4-其它" class="headerlink" title="2.4 其它"></a>2.4 其它</h3><h4 id="2-4-1-视图"><a href="#2-4-1-视图" class="headerlink" title="2.4.1 视图"></a>2.4.1 视图</h4><ol start="25">
<li>创建视图：<code>CREATE VIEW 视图名 AS SELECT ...;</code></li>
</ol>
<ul>
<li>视图是一张虚拟的表。</li>
</ul>
<ol start="26">
<li>删除视图：<code>DROP VIEW 视图名;</code></li>
</ol>
<h4 id="2-4-2-存储过程"><a href="#2-4-2-存储过程" class="headerlink" title="2.4.2 存储过程"></a>2.4.2 存储过程</h4><ol start="27">
<li>创建存储过程：<code>CREATE PROCEDURE 存储过程名();</code></li>
<li>创建函数：<code>CREATE FUNCTION 函数名();</code></li>
</ol>
<h4 id="2-4-3-触发器"><a href="#2-4-3-触发器" class="headerlink" title="2.4.3 触发器"></a>2.4.3 触发器</h4><ol start="29">
<li>查看触发器：<code>SHOW TRIGGERS;</code></li>
<li>删除触发器：<code>DROP TRIGGER 触发器名</code></li>
</ol>
<h4 id="2-4-4-事务"><a href="#2-4-4-事务" class="headerlink" title="2.4.4 事务"></a>2.4.4 事务</h4><ol start="31">
<li>查看事务开关状态：<code>SHOW VARIABLES LIKE &#39;autocommit&#39;;</code></li>
<li>打开/关闭事务的自动提交：<code>SET AUTOCOMMIT = 0|1;</code></li>
<li>创建临时表：<code>CREATE TEMPORARY TABLE 表名();</code>（临时表仅在当前连接有效，当关闭连接时，MySQL会自动删除表。临时表无法用<code>SHOW TABLES</code>命令查看）</li>
</ol>
<h4 id="2-4-5-系统信息"><a href="#2-4-5-系统信息" class="headerlink" title="2.4.5 系统信息"></a>2.4.5 系统信息</h4><ol start="34">
<li>查看当前用户名：<code>SELECT USER();</code></li>
<li>查看当前数据库：<code>SELECT DATABASE();</code></li>
<li>查看MySQL版本：<code>SELECT VERSION();</code></li>
</ol>
<h3 id="2-5-ALTER"><a href="#2-5-ALTER" class="headerlink" title="2.5 ALTER"></a>2.5 ALTER</h3><p>ALTER操作有<code>ALTER TABLE</code>，<code>ALTER DATABASE</code>，<code>ALTER EVENT</code>，<code>ALTER PROCEDURE</code>，<code>ALTER VIEW</code>等命令</p>
<h4 id="2-5-1-表的操作"><a href="#2-5-1-表的操作" class="headerlink" title="2.5.1 表的操作"></a>2.5.1 表的操作</h4><p><em>使用<code>ALTER TABLE</code>要极为小心，应该在进行改动前做完整的备份（模式和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的列，也许无法删除它们。类似地，如果删除了不应该删除的列，可能会丢失该列中的所有数据。</em></p>
<ol>
<li><strong>增加字段：<code>ALTER TABLE 表名 ADD [COLUMN] 字段名 字段类型 [FIRST|AFTER 字段名];</code></strong></li>
<li><strong>修改字段名及类型：<code>ALTER TABLE 表名 CHANGE [COLUMN] 旧字段名 新字段名 字段类型;</code></strong></li>
<li>修改字段类型：<code>ALTER TABLE 表名 MODIFY 字段名 类型 [NOT NULL];</code></li>
<li><strong>删除字段：<code>ALTER TABLE 表名 DROP [COLUMN] 字段名;</code></strong></li>
<li><strong>添加普通/唯一索引：<code>ALTER TABLE 表名 ADD INDEX/UNIQUE 索引名(字段1[,字段2]);</code></strong></li>
</ol>
<ul>
<li>请注意：对多个字段同时添加普通索引时，只对这些字段都进行检索时索引才会生效，仅对其中任何一个检索都不会有预期的效果。</li>
</ul>
<ol>
<li>创建短索引：<code>CREATE INDEX 索引名 ON 表名(字段(长度));</code> 或<code>KEY 索引名 (字段(长度))</code> 对于<code>CHAR</code>和<code>VARCHAR</code>列，只用它的一部分来创建索引，既可以节省索引空间，又可以加快索引速度。</li>
<li>添加主键：<code>ALTER TABLE 表名 ADD PRIMARY KEY (字段名);</code></li>
</ol>
<ul>
<li>MySQL中不允许有多个主键</li>
<li>主键的特点：非空且唯一，按需添加自增</li>
<li>主键的名字就是PRIMARY</li>
</ul>
<ol start="7">
<li>设置主键的自增起始值：<code>ALTER TABLE 表名 AUTO_INCREMENT = 100;</code></li>
<li>添加外键：<code>ALTER TABLE 表名 ADD [CONSTRAINT [约束名]] FOREIGN KEY (字段1[,字段2]) REFERENCES 表名(字段1[,字段2]) [ON DELETE|UPDATE CASCADE|RESTRICT];</code></li>
</ol>
<ul>
<li><code>CASCADE</code>（级联）：如果删除父表中的数据，则子表中的相应数据也一同被删除或更新</li>
<li><code>RESTRICT</code>（限制）：如果父表对应的子表中有相关的数据，则不允许删除或更新父表中的数据</li>
<li>外键约束用于子表中，而且父表与子表必须使用相同的存储引擎</li>
<li>当一张表中有多个外键时，可以使用约束名来进行区分，如果约束名省略，则由系统自动生成</li>
<li>创建外键约束的条件：<pre><code>  -  两张表都必须是InnoDB引擎（MyISAM不支持外键），且它们没有临时表
  - 外键关联的字段必须有相似的数据类型
  - 外键关联的字段必须建立了索引
</code></pre></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/create-table-foreign-keys.html" target="_blank" rel="noopener">外键的官方文档</a></li>
</ul>
<ol start="8">
<li>删除普通/唯一索引：<code>DROP INDEX 索引名 ON 表名;</code>或<code>ALTER TABLE 表名 DROP INDEX 字段名;</code></li>
<li>删除主键：<code>ALTER TABLE 表名 DROP PRIMARY KEY;</code></li>
<li>删除外键：<code>ALTER TABLE 表名 DROP FOREIGN KEY 约束名;</code></li>
<li>修改表名：<code>ALTER TABLE 旧表名 RENAME TO 新表名;</code></li>
<li>修改字段默认值：<code>ALTER TABLE 表名 ALTER 字段名 SET DEFAULT 默认值;</code></li>
<li>删除字段的默认值：<code>ALTER TABLE 表名 ALTER 字段名 DROP DEFAULT;</code></li>
<li>修改表的字符集：<code>ALTER TABLE 表名 DEFAULT CHARSET UTF8;</code></li>
</ol>
<h4 id="2-5-2-库的操作"><a href="#2-5-2-库的操作" class="headerlink" title="2.5.2 库的操作"></a>2.5.2 库的操作</h4><ul>
<li>修改库的字符集：<code>ALTER TABLE 库名 DEFAULT CHARSET UTF8;</code></li>
</ul>
<h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><h3 id="3-1-字符串函数"><a href="#3-1-字符串函数" class="headerlink" title="3.1 字符串函数"></a>3.1 字符串函数</h3><ul>
<li>拼接输出的内容：<code>CONCAT(字段1，字段2，……)</code></li>
<li>从左开始截取字符串：<code>LEFT(str, length)</code></li>
<li>从右开始截取字符串：<code>RIGHT(str, length)</code></li>
<li>截取字符串：<code>SUBSTRING(str, pos [,length] )</code>（可截取中文）</li>
<li>字符串长度：<code>LENGTH()</code>（包含中文时返回字符集下中文所占长度）</li>
<li>返回字符个数：<code>CHAR_LENGTH()</code></li>
<li>去除字符串左右的空格：<code>TRIM()</code></li>
<li>转小写：<code>LOWER()</code></li>
<li>转大写：<code>UPPER()</code></li>
<li>字符串比较：<code>STRCMP(字段1，字段2)</code>（字段1&lt;字段2返回-1，否则返回1，相等返回0）</li>
<li><code>SOUNDEX()</code>是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似的发音字符和音节，使得能对字符串进行发音比较而不是字母比较。</li>
<li>加密函数：<code>PASSWORD(&#39;加密内容&#39;)</code></li>
<li>MD5加密函数：<code>MD5(&#39;加密内容&#39;)</code></li>
</ul>
<h3 id="3-2-数值函数"><a href="#3-2-数值函数" class="headerlink" title="3.2 数值函数"></a>3.2 数值函数</h3><ul>
<li>数据类型转换：<code>CONVERT(&#39;转换内容&#39;，目标类型)</code></li>
<li>取余数：<code>MOD(x,y)</code></li>
<li>四舍五入：<code>TRUNCATE(x,y)</code></li>
<li>进制转换：<code>CONV(&#39;数值&#39;，进制，目标进制)</code></li>
<li>格式化结果：<code>FORMAT(数值，保留小数位数)</code></li>
<li>IP地址转数值：<code>INET_ATON(&#39;IP地址&#39;)</code>（Address TO Number）</li>
<li>数值转IP地址：<code>INET_NTOA(数值)</code>(Number TO Address)<ul>
<li>mysql用无符号整型存储IPv4</li>
</ul>
</li>
</ul>
<h3 id="3-3-日期时间函数"><a href="#3-3-日期时间函数" class="headerlink" title="3.3 日期时间函数"></a>3.3 日期时间函数</h3><ul>
<li>获取当前日期时间：<code>NOW()</code></li>
<li>获取当前日期：<code>CURDATE()</code></li>
<li>获取UTC日期：<code>UTC_DATE()</code></li>
<li>获取UTC时间：<code>UTC_TIME()</code></li>
<li>获取季度：<code>QUARTER(&#39;17-05-07&#39;)</code></li>
<li>获取分钟：<code>MINUTE(&#39;10:23:21&#39;)</code></li>
<li>获取秒数：<code>SECOND(&#39;10:23:21&#39;)</code></li>
</ul>
<h3 id="3-4-条件判断函数"><a href="#3-4-条件判断函数" class="headerlink" title="3.4 条件判断函数"></a>3.4 条件判断函数</h3><ul>
<li><code>IF(表达式，值1，值2)</code>类似于三元运算，如果表达式结果为真取值1，否则取值2</li>
<li><code>IFNULL(值1，值2)</code>优先返回非null的值，如<code>IFNULL(8,NULL)</code>和<code>IFNULL(NULL,8)</code>和<code>IFNULL(8,7)</code>都返回8</li>
</ul>
<h2 id="四、-MySQL权限"><a href="#四、-MySQL权限" class="headerlink" title="四、 MySQL权限"></a>四、 MySQL权限</h2><h3 id="4-1-MySQL权限经验原则："><a href="#4-1-MySQL权限经验原则：" class="headerlink" title="4.1 MySQL权限经验原则："></a>4.1 MySQL权限经验原则：</h3><ol>
<li>只授予满足需求的最小权限；</li>
<li>限制登录IP；</li>
<li>为每个用户设置高强度的密码；</li>
<li>定期清理不需要的用户，回收权限或者删除用户。</li>
</ol>
<h3 id="4-2-常用权限命令"><a href="#4-2-常用权限命令" class="headerlink" title="4.2 常用权限命令"></a>4.2 常用权限命令</h3><ul>
<li>创建用户：<code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</code>host可为IP地址段或域名或%，%表示不限制登录IP</li>
<li>创建并给用户授权：<br><code>mysql&gt; GRANT all|select,insert,update,delete ON dbname.tbname TO &#39;user&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code><ul>
<li>例子：<br><code>mysql&gt; GRANT all ON *.* TO Jack@&#39;localhost&#39; IDENTIFIED BY &quot;p@55w0rd&quot; WITH GRANT OPTION;
Query OK, 0 rows affected (0.01 sec)</code><br>该命令表示：为本地登录的用户Jack赋予所有数据库与所有数据表的所有权限，并且将登录密码设置为‘p@55w0rd’，而且允许该用户将自己拥有的授予其他用户。</li>
</ul>
</li>
<li>刷新权限：<code>mysql&gt; FLUSH PRIVILEGES;</code></li>
<li>查看权限：<code>mysql&gt; SHOW GRANTS [FOR &#39;jack&#39;@&#39;%&#39;];</code></li>
<li>撤销权限：<code>mysql&gt; REVOKE delete ON *.* FROM &#39;jack&#39;@&#39;loaclhost&#39;;</code></li>
<li>删除用户：<code>mysql&gt; DROP USER &#39;jack&#39;@&#39;localhost&#39;;</code></li>
<li>账户重命名：<code>mysql&gt; RENAME USER &#39;jack&#39;@&#39;%&#39; TO &#39;rose&#39;@&#39;%&#39;;</code></li>
<li>修改自己密码：<code>mysql&gt; SET PASSWORD=&#39;密码&#39;;</code></li>
<li>修改其他用户密码：<code>mysql&gt; SET PASSWORD FOR &#39;jack&#39;@&#39;localhost&#39;=PASSWORD(&#39;123456&#39;);</code></li>
<li>注：在MySQL 5.7及以上版本，mysql.user的密码字段由<code>password</code>更换为了<code>authentication_string</code><br><img src="http://ohx73ws1b.bkt.clouddn.com/mysql%20privilege.png" alt="Alt text"></li>
</ul>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/mysql%20perm.png" alt="Alt text"></p>
<h2 id="五、存储过程"><a href="#五、存储过程" class="headerlink" title="五、存储过程"></a>五、存储过程</h2><ul>
<li>查看所有存储过程：<code>select name from mysql.proc;</code>或<code>select routine_name from information_schema.routines;</code></li>
<li>查看某个数据库下的存储过程：<code>select name from mysql.proc where db=&#39;数据库名&#39;;</code>或<code>select routine_name from information_schema.routines where routine_schema=&#39;数据库名&#39;;</code></li>
<li>查看存储过程的详细内容：<code>SHOW CREATE PROCEDURE 数据库.存储过程名;</code></li>
<li>修改存储过程：<code>ALTER PROCEDURE 名称 [特性……]</code><ul>
<li>MySQL的存储过程只能修改其特性，不能修改过程体，若要修改过程体，只能删除后重新创建。</li>
</ul>
</li>
<li>删除存储过程：<code>DROP PROCEDURE [数据库.]存储过程名</code></li>
</ul>
<pre><code class="sql">-- 设置读取test表中的数据的存储过程
DROP PROCEDURE IF EXISTS sxy;
DELIMITER //
CREATE PROCEDURE sxy(IN var INT)
BEGIN
    SELECT * FROM `test` WHERE `id` = var;
END//
DELIMITER ;

-- 调用存储过程
CALL sxy(2);
</code></pre>
<h2 id="六、触发器"><a href="#六、触发器" class="headerlink" title="六、触发器"></a>六、触发器</h2><p>触发器经常用于加强数据的完整性约束和业务规则等。<br>一般来说，约束的处理速度比触发器快，因此应该尽量使用约束。<br>在MySQL中，创建触发器的语法如下：</p>
<pre><code class="sql">CREATE TRIGGER 触发器名称 触发时机(BEFORE|AFTER) 触发事件(INSERT|UPDATE|DELETE)  
  ON 表名 FOR EACH ROW
  BEGIN
    触发器程序体(SQL语句)
  END
</code></pre>
<p>由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。</p>
<p>另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。<br>查看触发器</p>
<ol>
<li><p>通过show语句查看触发器<br><code>SHOW TRIGGERS;</code></p>
</li>
<li><p>通过系统表查看触发器</p>
<pre><code class="sql">use information_shcema;
select * from tirggers;
select * from triggers where TRIGGER_NAME = &#39;触发器名称&#39;;
</code></pre>
</li>
</ol>
<p>触发器中的<code>new</code>和<code>old</code></p>
<ol>
<li>针对<code>update</code>操作，<code>new</code>表示的是更新后的值，<code>old</code>表示的是更新前的数据。</li>
<li>针对<code>insert</code>操作，<code>new</code>表示的是新增的值。</li>
<li>针对<code>delete</code>操作，<code>old</code>表示的是被删除的值。</li>
</ol>
<p>示例1：</p>
<pre><code class="sql">-- 插入触发器
mysql&gt; delimiter $$
mysql&gt; create trigger tab1_after_insert after insert
    -&gt; on tab1 for each row
    -&gt; BEGIN
    -&gt;   insert into tab2(tab2_id) values(new.tab1_id);
    -&gt; END
    -&gt; $$
Query OK, 0 rows affected (0.02 sec)

mysql&gt; delimiter ;
</code></pre>
<p>示例2</p>
<pre><code class="sql">-- 删除触发器
mysql&gt; delimiter $$
mysql&gt; create trigger tab1_delete_after after delete
    -&gt; on tab1 for each rows
    -&gt; BEGIN
    -&gt;   delete from tab2 where tab2_id = old.tab1_id;
    -&gt; END
    -&gt; $$
Query OK, 0 rows affected (0.01 sec)

mysql&gt; delimiter ;
</code></pre>
<p>示例3：</p>
<pre><code class="sql">-- 更新学生表的同时也更新记录表
delimiter $$
mysql&gt; create trigger student1_update_after after update
    -&gt; on student1 for each row
    -&gt; BEGIN
    -&gt;  if new.student_id != old.student_id then
    -&gt;   update update_student1 set student_id = new.student_id, update_date = now()
    -&gt;   where student_id = old.student_id;
    -&gt;  end if;
    -&gt; END
    -&gt; $$
delimiter ;
</code></pre>
<p>示例4</p>
<pre><code class="sql">-- 删除学生表的时候也删除记录表
mysql&gt; delimiter $$
mysql&gt; create trigger student1_delete_before before delete
    -&gt; on student1 for each row
    -&gt; BEGIN
    -&gt;  delete from update_student1
    -&gt;  where student_id = old.student_id;
    -&gt; END
    -&gt; $$
delimiter ;
</code></pre>
<h2 id="七、事务"><a href="#七、事务" class="headerlink" title="七、事务"></a>七、事务</h2><p>事务控制语句：</p>
<ul>
<li>BEGIN或START TRANSACTION；显示地开启一个事务；</li>
<li>COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier；把事务回滚到标记点；</li>
<li>SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。<pre><code class="sql">BEGIIN;-- 开启事务
  SQL语句1;
  SAVEPOINT sql1;
  IF(SQL语句1执行失败)
    ROLLBACK;-- 撤销所有执行
  SQL语句2;
  SAVEPOINT sql2;
  IF(SQL语句2执行失败)
    ROLLBACK TO sql1;-- 撤销部分执行
  RELEASE SAVEPOINT sql1;-- 删除保存点
      BEGIN;-- 嵌套事务
          SQL语句3;
          IF(SQL语句3执行失败)
              ROLLBACK TO sql2;
      COMMIT;  
COMMIT;-- 提交事务
</code></pre>
参考文章：<a href="http://www.jellythink.com/archives/952" target="_blank" rel="noopener">说说MySQL中的事务</a></li>
</ul>
<h2 id="八、-MySQL中的日志"><a href="#八、-MySQL中的日志" class="headerlink" title="八、 MySQL中的日志"></a>八、 MySQL中的日志</h2><p>共4种：</p>
<ol>
<li>错误日志：记录mysql服务的启动、运行、停止时出现的问题</li>
<li>查询日志（通用日志）：记录用户的所有操作</li>
<li>二进制日志：记录所有更改数据的语句，可以用于数据复制</li>
<li>慢查询日志：记录所有执行时间超过long_query_time的所有查询。官方的慢查询阈值只能设置大于1秒的，使用microslow-patch可以查询毫秒级的。</li>
</ol>
<p>除了错误日志默认开启外，其他日志都是默认关闭的。但日志既会影响mysql的性能，又会占用大量磁盘空间。因此，如果不必要，应尽可能少地开启日志。根据不同的使用环境，考虑开启不同的日志。例如开发环境中优化查询效率低的语句，可以开启慢查询日志，或者生产环境中发现某些SQL执行特别慢也可以开启。如果磁盘空间不是特充足可以在高峰期间开启，在捕获到查询慢的SQL之后再关闭慢查询日志。如果需要搭建复制环境，那么就一定要开启二进制日志，如果数据特别重要也建议开启二进制日志，以便数据库损坏的时候也可以通过二进制日志挽救一部分数据。通用日志无论在哪种情况下，一般不建议开启 。</p>
<p>常用命令</p>
<ul>
<li>查看日志信息：<code>show variables like &#39;%log_%&#39;;</code></li>
<li>查看错误日志的存储位置：<code>show variables LIKE &#39;log_error&#39;;</code></li>
<li>删除错误日志：<code>flush logs;</code><ul>
<li>MySQL 5.5.7版本前，<code>flush logs</code>可以将错误日志文件重命名为<code>filename.err_old</code>，并创建新的日志文件。但是从MySQL 5.5.7开始，<code>flush logs</code>只是重新打开日志文件，并不做日志备份和创建的操作。如果日志文件不存在，mysql启动或者执行flush logs时会创建新的日志文件</li>
</ul>
</li>
</ul>
<p>Mac使用HomeBrew安装的MySQL是没有my.cnf文件的，需要自己手动创建，具体信息请查看另一个笔记：<a href="https://app.yinxiang.com/shard/s27/nl/1310329143/2918975e-22e9-4749-a19c-38d792fdf8d5/" target="_blank" rel="noopener">在 Mac 下用 Homebrew 安装 MySQL配置文件my.cnf问题</a></p>
<h2 id="九、PHP连接MySQL的方式"><a href="#九、PHP连接MySQL的方式" class="headerlink" title="九、PHP连接MySQL的方式"></a>九、PHP连接MySQL的方式</h2><p>当考虑连接到MySQL数据库服务器的时候，有三种主要的API可供选择：</p>
<ul>
<li>PHP的MySQL扩展</li>
<li>PHP的MySQLi扩展</li>
<li>PHP数据对象（PDO）</li>
</ul>
<p>三者各有优缺点：</p>
<ol>
<li>mysql扩展提供了一个面向过程 的接口，并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数据库服务端 进行交互，但并不支持后期MySQL服务端提供的一些特性。</li>
<li><p>MySQLi扩展可以用于使用 MySQL4.1.3或更新版本中新的高级特性。其主要优势有：</p>
<ul>
<li>面向对象接口</li>
<li>prepared语句支持</li>
<li>多语句执行支持</li>
<li>事务支持</li>
<li>增强的调试能力</li>
<li>嵌入式服务支持</li>
</ul>
</li>
<li><p>PDO提供了一个统一的API接口可以使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器，比如从Firebird 到MySQL，仅仅需要修改很少的PHP代码。<br>PDO的优点在于，它是一个干净的，简单的，可移植的API，<strong>它最主要的缺点是会限制让你不能使用 后期MySQL服务端提供所有的数据库高级特性</strong>。比如，PDO不允许使用MySQL支持的多语句执行。</p>
</li>
</ol>
<h2 id="十、SQL注入"><a href="#十、SQL注入" class="headerlink" title="十、SQL注入"></a>十、SQL注入</h2><p><strong>永远不要信任外界输入的数据</strong>，<strong><em>特别是来自于客户端的</em></strong>，包括选择框、表单隐藏域和 cookie。</p>
<ul>
<li>永远不要使用超级用户或所有者帐号去连接数据库。要用权限被严格限制的帐号。</li>
<li>检查输入的数据是否具有所期望的数据格式。</li>
<li>使用数据库特定的敏感字符转义函数（比如 mysql_escape_string() 和 sql_escape_string()）把用户提交上来的非数字数据进行转义。如果数据库没有专门的敏感字符转义功能的话 addslashes() 和 str_replace() 可以代替完成这个工作。</li>
<li>尽量避免显示有关数据库的任何信息，尤其是数据库结构。</li>
<li>可以选择使用数据库的存储过程和预定义指针等特性来抽象数库访问，使用户不能直接访问数据表和视图。但这个办法又有别的影响。</li>
</ul>
<p>mysqli没有提供一个特殊的方法用于打开持久化连接。需要打开一个持久化连接时，你必须在 连接时在主机名前增加<code>p:</code>。</p>
<p>数据的导出及导入：<br>Linux下操作：<br>导出：<code>mysqldump -h -u -p 数据库名1 [数据库名2]&gt;本地地址</code><br>导入：<code>mysql -h -u -p 数据库名&lt;本地地址</code></p>
<h2 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a>十一、其他</h2><h3 id="11-1-避免重复插入记录"><a href="#11-1-避免重复插入记录" class="headerlink" title="11.1 避免重复插入记录"></a>11.1 避免重复插入记录</h3><p>1、使用<code>IGNORE</code>关键字。对于<code>PRIMARY KEY</code>或<code>UNIQUE</code>的字段来说，如果数据不重复则插入，重复则忽略（报警告，数据不会插入，不影响正常执行，无此关键字会报错误）。如：<code>INSERT IGNORE INTO test(id,name) VALUES(1,&#39;jack&#39;);</code><br>2、使用<code>REPLACE</code>关键字。该SQL与<code>IGNORE</code>的区别在于，如果数据重复，则先将旧的数据删除，然后插入新的。所以，执行该语句的影响行可以看出是否有重复的数据（为1表示无重复，大于1为重复）。<br>3、使用<code>ON DUPLICATE KEY UPDATE</code>，该句子是在有重复数据的时候，用新数据替换旧数据。</p>
<h3 id="11-2-统计重复数据"><a href="#11-2-统计重复数据" class="headerlink" title="11.2 统计重复数据"></a>11.2 统计重复数据</h3><p>比如统计重名的学生数量：<code>SELECT COUNT(name) AS deplication,name FROM student_info GROUP BY name HAVING deplication &gt; 1;</code></p>
<h3 id="11-3-数据导出"><a href="#11-3-数据导出" class="headerlink" title="11.3 数据导出"></a>11.3 数据导出</h3><p>需有FILE权限。</p>
<h4 id="方法一-使用OUTFILE"><a href="#方法一-使用OUTFILE" class="headerlink" title="方法一 使用OUTFILE"></a>方法一 使用OUTFILE</h4><p><code>SELECT 字段 FROM 表名 [WHERE等过滤条件] INTO OUTFILE &#39;保存路径&#39; [CHARACTER SET GBK] [FIELDS TERMINATED BY &#39;,&#39; [[ENCLOSED BY &#39;&quot;&#39;] LINES TERMINATED BY &#39;\n&#39;]];</code></p>
<ul>
<li>注意：由于xls和xlsx的中文默认gbk编码，因此如果数据表编码不一致，需在导出时使用<code>CHARACTER SET GBK</code>指定导出编码；在使用csv（Comma-Separated Values, 逗号分隔值）格式时，需使用<code>FIELDS TERMINATED BY &#39;,&#39;</code>指定字段分隔，否则会出现格式错误。</li>
</ul>
<h4 id="方法二-使用mysqldump命令"><a href="#方法二-使用mysqldump命令" class="headerlink" title="方法二 使用mysqldump命令"></a>方法二 使用mysqldump命令</h4><p><code>$mysqldump -u user -p pwd 数据库名 [表名] &gt; 文件;</code>导出指定数据库或指定数据表<br><code>$mysqldump -u user -p pwd --all-databases &gt; 文件;</code>备份所有数据库</p>
<h3 id="11-4-数据导入"><a href="#11-4-数据导入" class="headerlink" title="11.4 数据导入"></a>11.4 数据导入</h3><p>需有FILE权限。</p>
<h4 id="方法一-使用LOAD-DATA"><a href="#方法一-使用LOAD-DATA" class="headerlink" title="方法一 使用LOAD DATA"></a>方法一 使用LOAD DATA</h4><p><code>LOAD DATA [LOCAL] INFILE &#39;文件&#39; INTO TABLE 表名 [CHARACTER SET GBK] [FIELDS TERMINATED BY &#39;,&#39; OPTIONALLY ENCLOSED BY &#39;&quot;&#39; LINES TERMINATED BY &#39;\n&#39;];</code></p>
<ul>
<li>注意数据表的编码，即使同为GBK编码，也会出现报错的情况，因此最好在导入前确定数据表与文件的编码，然后指定编码导入。</li>
<li><strong>无论在导入还是导出csv格式文件时，都需要使用<code>FIELDS TERMINATED BY &#39;,&#39;</code></strong></li>
<li>如果指定LOCAL关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</li>
</ul>
<h4 id="方法二-使用mysqldump命令-1"><a href="#方法二-使用mysqldump命令-1" class="headerlink" title="方法二 使用mysqldump命令"></a>方法二 使用mysqldump命令</h4><p><code>$mysqldump -u user -p pwd 数据库名 [表名] &lt; 文件;</code></p>
<h4 id="方法三-使用mysqlimport"><a href="#方法三-使用mysqlimport" class="headerlink" title="方法三 使用mysqlimport"></a>方法三 使用mysqlimport</h4><p><code>$mysqlimport -u user -p [--local] [--fields-terminated-by=&quot;:&quot; --lines-terminated-by=&quot;\r\n&quot; --columns=字段1，字段2] 数据库名 文件名</code></p>
<p>更多数据导入/导出信息请点击：<a href="https://segmentfault.com/a/1190000003941100" target="_blank" rel="noopener">如何将 JSON, Text, XML, CSV 数据文件导入 MySQL</a></p>
<h3 id="11-5-索引的性能"><a href="#11-5-索引的性能" class="headerlink" title="11.5 索引的性能"></a>11.5 索引的性能</h3><ul>
<li>索引改善检索操作的性能，但降低数据插入、修改和删除的性能。因为在执行这些操作时，MySQL必须动态地更新索引。</li>
<li>索引数据可能要占用大量的存储空间。</li>
<li>数据量少的字段不适合做索引。并非所有数据都适合做索引。取值不多的数据（如州）不如具有更多可能值的数据（如姓名），能通过索引得到那么多的好处。</li>
<li>用于排序的字段适合添加索引。索引用于数据过滤和数据排序。如果你经常以某种特定的顺序排序数据，则该数据可能适合做索引。</li>
<li>可以在索引中定义多个列（如，州和城市）。这样的索引仅在以州+城市的排序时有用，如果以城市排序，则该索引并没什么用处。</li>
<li><strong>索引的效率随表数据的增加或改变而变化。许多DBA发现，过去创建的某个理想的索引经过几个月的数据处理后可能变得不再理想了。最好定期检查索引，并根据需要对索引进行调整。</strong></li>
</ul>
<h3 id="11-6-一些术语释义"><a href="#11-6-一些术语释义" class="headerlink" title="11.6 一些术语释义"></a>11.6 一些术语释义</h3><ul>
<li>DDL(Data Definition Language)：数据定义语言</li>
<li>DML(Data Manipulation Language)：数据操作语言</li>
<li>DRL(Data Retrieval Language)：数据查询语言</li>
</ul>
<p>更多术语解释：<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html" target="_blank" rel="noopener">MySQL Glossary</a></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自建shadowsocks服务器教程]]></title>
      <url>https://blog.palemoky.top/2017/05/08/%E8%87%AA%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/bridge.jpg" width="350px"></p>
<a id="more"></a>
<p>搬瓦工系统自带的shadowsocks只支持CentOS 6及以下，那就自己搭建一个吧。</p>
<h3 id="1-环境："><a href="#1-环境：" class="headerlink" title="1. 环境："></a>1. 环境：</h3><p>服务器端：CentOs 7 64位（全新）<br>客户端：OS X 10.12.5 + ShadowsocksX-NG 1.5.0</p>
<h3 id="2-安装EPEL"><a href="#2-安装EPEL" class="headerlink" title="2. 安装EPEL"></a>2. 安装EPEL</h3><p><code>$ sudo yum -y install epel-release</code></p>
<h3 id="3-安装pip"><a href="#3-安装pip" class="headerlink" title="3.安装pip"></a>3.安装pip</h3><p><code>$ sudo yum -y install python-pip</code></p>
<h3 id="4-安装shadowsocks"><a href="#4-安装shadowsocks" class="headerlink" title="4. 安装shadowsocks"></a>4. 安装shadowsocks</h3><p><code>$ sudo pip install shadowsocks</code></p>
<h3 id="5-配置shadowsocks"><a href="#5-配置shadowsocks" class="headerlink" title="5. 配置shadowsocks"></a>5. 配置shadowsocks</h3><p><code>mkdir /etc/shadowsocks/</code><br><code>$ vi /etc/shadowsocks/config.json</code><br>内容如下：</p>
<pre><code class="json">{
  &quot;server&quot;:&quot;your_server_ip&quot;,
  &quot;server_port&quot;:443,
  &quot;password&quot;:&quot;yourpassword&quot;,
  &quot;timeout&quot;:300,
  &quot;method&quot;:&quot;aes-256-cfb&quot;,
  &quot;fast_open&quot;:false,
  &quot;workers&quot;: 1
}
</code></pre>
<p>代码中各字段的含义：</p>
<ul>
<li>server：服务器 IP地址 (IPv4/IPv6)</li>
<li>server_port：服务器监听的端口，一般设为80，443等，注意不要设为使用中的端口</li>
<li>password：设置密码，自定义</li>
<li>timeout：超时时间（秒）</li>
<li>method：加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等。推荐使用 “rc4-md5”</li>
<li>fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。</li>
<li>workers：workers数量，默认为 1。</li>
</ul>
<h4 id="5-1-多账户配置"><a href="#5-1-多账户配置" class="headerlink" title="5.1 多账户配置"></a>5.1 多账户配置</h4><pre><code class="json">{
  &quot;server&quot;:&quot;your_server_ip&quot;,
  &quot;port_password&quot;:{
       &quot;8381&quot;:&quot;pass1&quot;,
       &quot;8382&quot;:&quot;pass2&quot;,
       &quot;8383&quot;:&quot;pass3&quot;,
       &quot;8384&quot;:&quot;pass4&quot;
       },
  &quot;timeout&quot;:60,
  &quot;method&quot;:&quot;rc4-md5&quot;,
  &quot;fast_open&quot;:false,
  &quot;workers&quot;:1
}
</code></pre>
<h3 id="6-设置shadowsocks开机自启"><a href="#6-设置shadowsocks开机自启" class="headerlink" title="6. 设置shadowsocks开机自启"></a>6. 设置shadowsocks开机自启</h3><p><code>vi /etc/systemd/system/shadowsocks.service</code><br>内容如下：</p>
<pre><code class="json">[Unit]
Description=Shadowsocks

[Service]
TimeoutStartSec=0
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks/config.json

[Install]
WantedBy=multi-user.target
</code></pre>
<p>执行以下命令启动 shadowsocks 服务：</p>
<pre><code>systemctl enable shadowsocks
systemctl start shadowsocks
</code></pre><p>执行命令<code>systemctl status shadowsocks</code>查看ss状态<br>如果 shadowsocks 启动失败，可根据日志 <code>/var/log/shadowsocks.log</code> 信息进行排查。</p>
<hr>
<p>参考文章：</p>
<ol>
<li><a href="https://php-rmcr7.rhcloud.com/shadowsocks-server/" target="_blank" rel="noopener">教你如何搭建自己的Shadowsocks服务器</a></li>
<li><a href="https://yuyii.com/2015/12/28/shadowsocks-systemd/" target="_blank" rel="noopener">Shadowsocks systemd 配置</a></li>
<li><a href="https://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html" target="_blank" rel="noopener">在 CentOS 7 下安装配置 shadowsocks</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[本地git仓库间的通信]]></title>
      <url>https://blog.palemoky.top/2017/04/26/%E6%9C%AC%E5%9C%B0git%E4%BB%93%E5%BA%93%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>同一台电脑的两个git仓库间如何通信呢？</p>
<a id="more"></a>
<p>首先要明确一点：git是<strong>分布式</strong>版本管理工具。也就是说各个git仓库间是<strong>相互独立</strong>的。</p>
<p>现在，我们在<code>admin</code>家目录下新建两个git仓库，分别取名为<code>t1</code>和<code>t2</code>：</p>
<pre><code>[admin@bravo ~]$ git init t1
Initialized empty Git repository in /home/admin/t1/.git/
[admin@bravo ~]$ git init t2
Initialized empty Git repository in /home/admin/t2/.git/
[admin@bravo t1]$
</code></pre><p>然后，进入t1目录，创建一个名为t1的文件，并加入git跟踪</p>
<pre><code>[admin@bravo t1]$ touch t1
[admin@bravo t1]$ git add .
[admin@bravo t1]$ git commit -m &#39;create t1&#39;
[master (root-commit) 701f8b8] create t1
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 t1
[admin@bravo t1]$
</code></pre><p>接下来，进入t2目录，并关联t1仓库</p>
<pre><code>[admin@bravo t1]$ cd ../t2
[admin@bravo t2]$ git remote add t1 /home/admin/t1
[admin@bravo t2]$ git remote -vv
t1    /home/admin/t1 (fetch)
t1    /home/admin/t1 (push)
</code></pre><p>最后，拉取t1目录中的文件</p>
<pre><code>[admin@bravo t2]$ git fetch t1
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /home/admin/t1
 * [new branch]      master     -&gt; t1/master
[admin@bravo t2]$ git merge t1/master
[admin@bravo t2]$ ls
t1
[admin@bravo t2]$
</code></pre><p>好了，现在你就可以在t2仓库中同步到t1仓库中的内容了，由于git能够精确到行，因此很方便文件冲突的解决。</p>
<p>说了这么多，这有什么用呢？<br>在我们开发时，经常是前后端分离的，而且大家的代码都在同一台测试服务器上，一个完整的功能需要前后端代码合并后才能测试，这种方式就能完美合并前后端代码了。</p>
<p>注意：首先要对被拉取代码的目录拥有读取权限，也就是t1目录要有r才能执行上述操作。</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些常见的PHP面试题]]></title>
      <url>https://blog.palemoky.top/2017/03/16/%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84PHP%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这都是我面试的血泪史啊:(</p>
<a id="more"></a>
<h3 id="一、-数组及传值方式的考察"><a href="#一、-数组及传值方式的考察" class="headerlink" title="一、 数组及传值方式的考察"></a>一、 数组及传值方式的考察</h3><pre><code class="php">&lt;?php
  $arr = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];
  foreach ($arr as &amp;$v) {
      # code...
  }

  foreach ($arr as $v) {
      # code...
  }
  print_r($arr);
</code></pre>
<p>结果是$arr = [‘a’,’b’,’b’]，你答对了吗？</p>
<p>反正我是想了一个礼拜才弄明白:)</p>
<p>解析：这道题首先要注意第一次循环中的”&amp;”符号，考察的是PHP中的引用赋值和拷贝赋值。</p>
<p>  最后出现“令人意外”的结果的原因就在于，第一次循环是每次把$arr元素的地址给了$v，而$v的地址在循环结束后有没被释放掉，所以第一次循环结束后$v存的是$arr[2]的<strong>地址</strong>，第二次循环是把$arr的值分别给了$v，由于此时的$v指向的是$arr[2]，所以每次指针的移动都是把当前的元素放入$arr[2]中，所以</p>
<ul>
<li>第一次循环$arr = [‘a’,’b’,’a’];</li>
<li>第二次循环$arr = [‘a’,’b’,’b’];</li>
<li>第三次循环$arr = [‘a’,’b’,’b’];</li>
</ul>
<p>第三次循环的结果就是把自己的$arr[2]的内容取出来赋给$arr[2]，所以结果是$arr = [‘a’,’b’,’b’];</p>
<p>因此我们<strong>在使用”&amp;”符号时，最好将其unset掉，否则会导致意外行为</strong>。</p>
<p>最后上一个图说明一下：<br><img src="http://ohx73ws1b.bkt.clouddn.com/foreach%E9%9D%A2%E8%AF%95%E9%A2%98.jpg" alt=""></p>
<p>参考资料：<a href="https://segmentfault.com/q/1010000008279730" target="_blank" rel="noopener">https://segmentfault.com/q/1010000008279730</a></p>
<hr>
<h3 id="二、-数组的考察"><a href="#二、-数组的考察" class="headerlink" title="二、 数组的考察"></a>二、 数组的考察</h3><pre><code class="php">&lt;?php
$a = 9;
$t = [1];
foreach($t as $v)
{
    $v += $a;
}
var_dump($t);
</code></pre>
<p>结果是<code>1</code>而不是<code>10</code>。</p>
<hr>
<h3 id="三、-SQL的考察"><a href="#三、-SQL的考察" class="headerlink" title="三、 SQL的考察"></a>三、 SQL的考察</h3><p>现有一个学生成绩表student,内容如下：</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E8%A1%A8.png" alt=""></p>
<p>请据表查询，</p>
<ol>
<li>用一个select查出两门及以上的不及格者的平均成绩</li>
<li>统计学生不及格科目的个数</li>
<li>获取每个学生的最佳科目及成绩</li>
<li>获取不及格学生的名字及科目</li>
</ol>
<p>答：</p>
<ol>
<li><p><code>select name, sum(score&lt;60) as num, avg(score) as avg_score  from student  group by name having num &gt; 1;</code><br><br><img src="http://ohx73ws1b.bkt.clouddn.com/2%E9%97%A8%E5%8F%8A%E4%BB%A5%E4%B8%8A%E4%B8%8D%E5%8F%8A%E6%A0%BC%E7%9A%84%E5%B9%B3%E5%9D%87%E5%88%86.png" alt=""></p>
</li>
<li><p><code>select name, sum(score &lt; 60) as no_pass from student group by name;</code><br><br><img src="http://ohx73ws1b.bkt.clouddn.com/%E4%B8%8D%E5%8F%8A%E6%A0%BC%E7%A7%91%E7%9B%AE%E6%95%B0.png" alt=""></p>
</li>
<li><p><code>select name, subject, score from student where score in (select max(score) as score from student group by name);</code><br><br><img src="http://ohx73ws1b.bkt.clouddn.com/%E6%9C%80%E4%BD%B3%E7%A7%91%E7%9B%AE%E5%8F%8A%E6%88%90%E7%BB%A9.png" alt=""></p>
</li>
<li><p><code>select name, group_concat(subject) as subject from (select name, subject from student where score &lt; 60) as info group by name;</code>//此处需要注意的是，子查询语句结果需要给一个alias，否则会报错<br><br><img src="http://ohx73ws1b.bkt.clouddn.com/%E4%B8%8D%E5%8F%8A%E6%A0%BC%E7%A7%91%E7%9B%AE%E5%88%97%E8%A1%A8.png" alt=""></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[UA列表]]></title>
      <url>https://blog.palemoky.top/2017/03/12/UA%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/browser.jpeg" alt="Browser"></p>
<a id="more"></a>
<p>常见UA列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">BROWSER</th>
<th style="text-align:center">USER AGENT</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Safari 10.0</td>
<td style="text-align:center">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50</td>
</tr>
<tr>
<td style="text-align:center">Safari 10.0-iOS10-iPhone</td>
<td style="text-align:center">Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1</td>
</tr>
<tr>
<td style="text-align:center">Safari 10.0-iOS10-iPod touch</td>
<td style="text-align:center">Mozilla/5.0 (iPod; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1</td>
</tr>
<tr>
<td style="text-align:center">Safari 10.0-iOS10-iPad</td>
<td style="text-align:center">Mozilla/5.0 (iPad; CPU OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1</td>
</tr>
<tr>
<td style="text-align:center">Microsoft Edge</td>
<td style="text-align:center">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586</td>
</tr>
<tr>
<td style="text-align:center">Internet Explorer  11</td>
<td style="text-align:center">Mozilla/5.0 (Windows NT 6.3; Win64, x64; Trident/7.0; rv:11.0) like Gecko</td>
</tr>
<tr>
<td style="text-align:center">Internet Explorer  10</td>
<td style="text-align:center">Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)</td>
</tr>
<tr>
<td style="text-align:center">Internet Explorer  9</td>
<td style="text-align:center">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</td>
</tr>
<tr>
<td style="text-align:center">Internet Explorer  8</td>
<td style="text-align:center">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)</td>
</tr>
<tr>
<td style="text-align:center">Internet Explorer  7</td>
<td style="text-align:center">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</td>
</tr>
<tr>
<td style="text-align:center">Google Chrome - Mac</td>
<td style="text-align:center">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36</td>
</tr>
<tr>
<td style="text-align:center">Google Chrome - Windows</td>
<td style="text-align:center">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36</td>
</tr>
<tr>
<td style="text-align:center">Firefox - Mac</td>
<td style="text-align:center">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:46.0) Gecko/20100101 Firefox/46.0</td>
</tr>
<tr>
<td style="text-align:center">Firefox - Windows</td>
<td style="text-align:center">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0</td>
</tr>
</tbody>
</table>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[操作系统封装小感]]></title>
      <url>https://blog.palemoky.top/2017/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85%E5%B0%8F%E6%84%9F/</url>
      <content type="html"><![CDATA[<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=8679165&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">


<a id="more"></a>
<hr>
<p>经过近一周的奋战，终于把去年8月就想录制的系统封装教程录制剪辑完毕了，现已上线：</p>
<p>Bilibili : <a href="http://www.bilibili.com/video/av8679165/" target="_blank" rel="noopener">http://www.bilibili.com/video/av8679165/</a></p>
<p>YouTube : <a href="https://www.youtube.com/watch?v=urmczmqsHn4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=urmczmqsHn4</a></p>
<p>在这个过程中，确实学到了不少，也折腾了不少，首先是距离上次封装已经有半年了，自己记忆模糊，然后是第一次录制，上来直接开录，导致推到两三次，最后就是Castasia、Premiere、After Effect等软件的使用，毕竟新手，用起来总是磕磕碰碰，所幸最终教程顺利上线，自己也总结一下本次的经验，以便今后参考：</p>
<ol>
<li>录制视频前，自己要先把录制的内容走一遍，尽可能使录制一气呵成。可以把录制内容拆分步骤，记录在旁边，减少出错。对于自己出现的问题在后期处理时重点标出</li>
<li>对于一些文字内容，可以适当放大屏幕来提高体验，这一点可以通过Premiere的效果控件中的缩放来实现</li>
<li>对于一些不必要的过程，可适当进行剪辑，倍速播放等</li>
<li>在整个录制过程中，耗时很多的几个步骤是：<ul>
<li>系统打补丁（近3小时）</li>
<li>镜像文件的保存（1小时左右）</li>
<li>wim转esd格式（2小时）</li>
<li>Castasia保存录制的原生视频（1小时）</li>
<li>Pr导出剪辑好的视频（1小时）</li>
</ul>
</li>
<li>本次录制使用了VMware封装、Castasia 9.0录屏、Premiere剪辑、After Effect添加字幕</li>
<li>在最后的上传中，由于YouTube强大的Content ID机制，我其中的一段背景音乐因为侵权而导致整个视频都被静音，最后移除该段音乐解决。<br><img src="http://ohx73ws1b.bkt.clouddn.com/YouTube%E9%9F%B3%E4%B9%90%E7%89%88%E6%9D%83.png" alt=""></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 日常技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统封装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel教程之Homestead for Mac & Windows]]></title>
      <url>https://blog.palemoky.top/2017/01/19/Laravel%E6%95%99%E7%A8%8B%E4%B9%8BHomestead/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/laravel-logo.jpg" alt="Laravel"></p>
<a id="more"></a>
<p>首先引用Laravel官方关于Homestead的简介：</p>
<blockquote>
<p>Laravel Homestead 是一个打包好各种 Laravel 开发所需要的软件及工具的 Vagrant 盒子（Vagrant 提供了一个便捷的方式来管理和设置虚拟机），该盒子为我们提供了优秀的开发环境，有了它，我们不再需要在本地环境安装 PHP、HHVM、Web服务器以及其它工具软件，我们也完全不用再担心误操作搞乱操作系统 —— 因为 Vagrant 盒子是一次性的，如果出现错误，可以在数分钟内销毁并重新创建该 Vagrant 盒子！</p>
</blockquote>
<blockquote>
<p>Homestead可以运行在 Windows、Mac 以及 Linux 系统上，其中已经安装好了Nginx、PHP7.0、MySQL、Postgres、Redis、Memcached、Node以及很多其它开发 Laravel 应用所需要的东西。</p>
</blockquote>
<h3 id="Mac环境教程："><a href="#Mac环境教程：" class="headerlink" title="Mac环境教程："></a>Mac环境教程：</h3><p> <a href="http://oomusou.io/laravel/homestead/homestead-osx/#" target="_blank" rel="noopener">http://oomusou.io/laravel/homestead/homestead-osx/#</a></p>
<h3 id="Windows环境教程："><a href="#Windows环境教程：" class="headerlink" title="Windows环境教程："></a>Windows环境教程：</h3><p><a href="https://laravel-china.org/topics/2519" target="_blank" rel="noopener">https://laravel-china.org/topics/2519</a></p>
<h3 id="特别提示"><a href="#特别提示" class="headerlink" title="特别提示"></a>特别提示</h3><ol>
<li><p>Mac下的<code>vagrant box add laravel/homestead</code>命令请参见Windows环境操作</p>
</li>
<li><p>box文件百度云下载链接：<a href="http://pan.baidu.com/s/1dEJdHj7" target="_blank" rel="noopener">http://pan.baidu.com/s/1dEJdHj7</a> 密码：kzlc</p>
</li>
<li><p><code>homestead up</code>命令已经在新版中移除，有些教程中会有提及此命令，因此请不要再尝试在新版中使用此命令。</p>
</li>
<li><p>注意添加本地box时的命令是<code>vagrant box add *.json</code>，而不是box文件名，网上很多教程这里是不适用的！</p>
</li>
<li><p>vagrant的打包分发可以参考这篇文章:<a href="https://segmentfault.com/a/1190000000264347" target="_blank" rel="noopener">使用 Vagrant 打造跨平台开发环境</a></p>
</li>
</ol>
<p>关于vagrant命令详解请参见：</p>
<p>[1] <a href="http://blog.csdn.net/54powerman/article/details/50669807" target="_blank" rel="noopener">http://blog.csdn.net/54powerman/article/details/50669807</a></p>
<p>[2] <a href="https://github.com/astaxie/go-best-practice/blob/master/ebook/zh/01.3.md" target="_blank" rel="noopener">https://github.com/astaxie/go-best-practice/blob/master/ebook/zh/01.3.md</a></p>
<p>最后有人可能会在Mac下使用Valet，如果你想卸载Valet，请参见<a href="https://stackoverflow.com/questions/40276967/uninstall-laravel-valet" target="_blank" rel="noopener">这里</a>，安装很简单，按照官方文档就搞定了。</p>
<p>如果你们有什么问题，欢迎在下方留言，我会及时回复。</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Homestead </tag>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别]]></title>
      <url>https://blog.palemoky.top/2017/01/17/%E3%80%90%E8%BD%AC%E3%80%91%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>常言道：一图胜千言，先看图：</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE.jpeg" alt="简图"><br><a id="more"></a></p>
<h3 id="BSD开源协议"><a href="#BSD开源协议" class="headerlink" title="BSD开源协议"></a>BSD开源协议</h3><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>
<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>
<pre><code>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。
如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。
不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。
</code></pre><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>
<h3 id="Apache-Licence-2-0"><a href="#Apache-Licence-2-0" class="headerlink" title="Apache Licence 2.0"></a>Apache Licence 2.0</h3><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p>
<pre><code>需要给代码的用户一份Apache Licence
如果你修改了代码，需要再被修改的文件中说明。
在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。
如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。
</code></pre><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p>
<h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p>
<p>GPL协议的主要内容是只要在一个软件中使用(”使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>
<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p>
<p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p>
<h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h3><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>
<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
<p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>
<h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p>
<h3 id="MPL"><a href="#MPL" class="headerlink" title="MPL"></a>MPL</h3><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处:</p>
<ul>
<li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个豁口。</li>
<li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</li>
<li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</li>
<li>对源代码的定义<br>而在MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。”</li>
<li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li>
</ul>
<hr>
<p>原文链接：<a href="http://blog.leanote.com/post/xkeys/%E3%80%90%E8%BD%AC%E3%80%91%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">各种开源许可协议的区别</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac和CentOS命令行下文件校验]]></title>
      <url>https://blog.palemoky.top/2017/01/15/Mac%E5%92%8CCentOS%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p><img src="http://ohx73ws1b.bkt.clouddn.com/md5_check.png" alt="terminal check"></p>
<a id="more"></a>
<p>　　你从互联网上下载了某个文件(比如安装程序、ISO映像文件或压缩文件)后，该文件可能因各种错误情形而遭到损坏，比如由于网络连接上的传输错误、下载受到中断、存储硬件有故障、文件系统错误等。抛开此类错误情形不说，文件还有可能被攻击者在下载过程中或下载前恶意篡改。比如说，攻击者对认证中心做手脚后，就能发动中间人(MITM)攻击，引诱你从假冒的HTTPS网站下载感染了恶意软件的文件。</p>
<p>　　为了保护自己远离这些种类的问题，你从互联网下载文件时，我们常常建议验证文件的真实性和完整性。尤其是你下载了相当敏感的文件(比如操作系统映像文件、应用程序二进制代码和可执行的安装程序等)后，盲目地相信已下载文件可不是一个好习惯。</p>
<p>在Mac平台下，你可以使用以下方式进行校验：</p>
<ol>
<li>MD5：<code>md5 filename</code></li>
<li>SHA1: <code>shasum filename</code></li>
<li>CRC32: <code>crc32 filename</code></li>
</ol>
<p>CentOS平台下则是：</p>
<ol>
<li>MD5: <code>md5sum filename</code></li>
<li>SHA1: <code>shasum filename</code></li>
</ol>
<p>是不是方便了很多呢。</p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> md5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7图形化安装教程]]></title>
      <url>https://blog.palemoky.top/2017/01/14/CentOS-7%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>CentOS 7 DVD版本阿里云下载链接：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1611.iso" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1611.iso</a></p>
<a id="more"></a>
<p>今晚要安装图形化的CentOS做开发用，本以为很简单，一路next下去竟然发现是命令行模式，然后找了一篇不错的教程，以下贴几张关键截图，更多详细教程请移步至原贴：<a href="http://tieba.baidu.com/p/3152957061?see_lz=1#" target="_blank" rel="noopener">【原创】Centos7.0安装图文详解</a></p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/CentOS_7_graph_1.jpg" alt="图形化界面选择"></p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/CentOS_7_graph_2.jpg" alt="GNOME"></p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/CentOS_7_graph_3.jpg" alt="网络设置"></p>
<p>之前我有一次刚装完系统就root进不去了，然后就有了以下这个：<a href="http://jingyan.baidu.com/article/4b07be3c687f2748b280f36b.html" target="_blank" rel="noopener">CentOs7忘记root密码怎么办？</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]浅谈CSRF攻击方式]]></title>
      <url>https://blog.palemoky.top/2017/01/12/%E8%BD%AC-%E6%B5%85%E8%B0%88CSRF%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>好久没更新了，hexo命令都要忘记了。。。<br><a id="more"></a></p>
<h3 id="一-CSRF是什么？"><a href="#一-CSRF是什么？" class="headerlink" title="一.CSRF是什么？"></a>一.CSRF是什么？</h3><p>　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>
<h3 id="二-CSRF可以做什么？"><a href="#二-CSRF可以做什么？" class="headerlink" title="二.CSRF可以做什么？"></a>二.CSRF可以做什么？</h3><p>　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>
<h3 id="三-CSRF漏洞现状"><a href="#三-CSRF漏洞现状" class="headerlink" title="三.CSRF漏洞现状"></a>三.CSRF漏洞现状</h3><p>　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI……而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p>
<h3 id="四-CSRF的原理"><a href="#四-CSRF的原理" class="headerlink" title="四.CSRF的原理"></a>四.CSRF的原理</h3><p>　　下图简单阐述了CSRF攻击的思想：</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/CRSF%E6%94%BB%E5%87%BB.jpg" alt="CSRF攻击"></p>
<p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>
<p>　　1. 登录受信任网站A，并在本地生成Cookie。</p>
<p>　　2. 在不登出A的情况下，访问危险网站B。</p>
<p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>
<p>　　1. 你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p>
<p>　　2. 你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</p>
<p>　　3. 上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p>
<p>　　上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;）</p>
<p>　　示例1：</p>
<p>　　银行网站A，它以GET请求来完成银行转账的操作，如：<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000" target="_blank" rel="noopener">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a></p>
<p>　　危险网站B，它里面有一段HTML的代码如下：</p>
<p>  <code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</code></p>
<p>  首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……</p>
<p>　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作....." target="_blank" rel="noopener">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作.....</a>.</p>
<p>　　示例2：</p>
<p>　　为了杜绝上面的问题，银行决定改用POST请求完成转账操作。</p>
<p>　　银行网站A的WEB表单如下：　　</p>
<pre><code>    &lt;form action=&quot;Transfer.php&quot; method=&quot;POST&quot;&gt;
　　　　&lt;p&gt;ToBankId: &lt;input type=&quot;text&quot; name=&quot;toBankId&quot; /&gt;&lt;/p&gt;
　　　　&lt;p&gt;Money: &lt;input type=&quot;text&quot; name=&quot;money&quot; /&gt;&lt;/p&gt;
　　　　&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Transfer&quot; /&gt;&lt;/p&gt;
　　 &lt;/form&gt;
</code></pre><p>   后台处理页面Transfer.php如下：</p>
<pre><code>   &lt;?php
　　　　session_start();
　　　　if (isset($_REQUEST[&#39;toBankId&#39;] &amp;&amp;　isset($_REQUEST[&#39;money&#39;]))
　　　　{
　　　　    buy_stocks($_REQUEST[&#39;toBankId&#39;],　$_REQUEST[&#39;money&#39;]);
　　　　}
　　?&gt;
</code></pre><p>  危险网站B，仍然只是包含那句HTML代码：</p>
<p><code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</code></p>
<p>和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求 的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p>
<p>　　示例3：</p>
<p>　　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：</p>
<pre><code>&lt;?php
　　　　session_start();
　　　　if (isset($_POST[&#39;toBankId&#39;] &amp;&amp;　isset($_POST[&#39;money&#39;]))
　　　　{
　　　　    buy_stocks($_POST[&#39;toBankId&#39;],　$_POST[&#39;money&#39;]);
　　　　}
　　?&gt;
</code></pre><p>   然而，危险网站B与时俱进，它改了一下代码：</p>
<pre><code>&lt;html&gt;
　　&lt;head&gt;
　　　　&lt;script type=&quot;text/javascript&quot;&gt;
　　　　　　function steal()
　　　　　　{
          　　　　 iframe = document.frames[&quot;steal&quot;];
　　     　　      iframe.document.Submit(&quot;transfer&quot;);
　　　　　　}
　　　　&lt;/script&gt;
　　&lt;/head&gt;

　　&lt;body onload=&quot;steal()&quot;&gt;
　　　　&lt;iframe name=&quot;steal&quot; display=&quot;none&quot;&gt;
　　　　　　&lt;form method=&quot;POST&quot; name=&quot;transfer&quot;　action=&quot;http://www.myBank.com/Transfer.php&quot;&gt;
　　　　　　　　&lt;input type=&quot;hidden&quot; name=&quot;toBankId&quot; value=&quot;11&quot;&gt;
　　　　　　　　&lt;input type=&quot;hidden&quot; name=&quot;money&quot; value=&quot;1000&quot;&gt;
　　　　　　&lt;/form&gt;
　　　　&lt;/iframe&gt;
　　&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p>
<p>　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。</p>
<p>　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p>
<h3 id="五-CSRF的防御"><a href="#五-CSRF的防御" class="headerlink" title="五.CSRF的防御"></a>五.CSRF的防御</h3><p>　　我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p>
<p>　　1. 服务端进行CSRF防御</p>
<p>　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>
<p>　　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</p>
<p>　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;</p>
<pre><code>&lt;?php
　　　　//构造加密的Cookie信息
　　　　$value = “DefenseSCRF”;
　　　　setcookie(”cookie”, $value, time()+3600);
　　?&gt;
</code></pre><p>在表单里增加Hash值，以认证这确实是用户发送的请求。</p>
<pre><code>&lt;?php
　　　　$hash = md5($_COOKIE[&#39;cookie&#39;]);
　　?&gt;
　　&lt;form method=”POST” action=”transfer.php”&gt;
　　　　&lt;input type=”text” name=”toBankId”&gt;
　　　　&lt;input type=”text” name=”money”&gt;
　　　　&lt;input type=”hidden” name=”hash” value=”&lt;?=$hash;?&gt;”&gt;
　　　　&lt;input type=”submit” name=”submit” value=”Submit”&gt;
　　&lt;/form&gt;
</code></pre><p>然后在服务器端进行Hash值验证</p>
<pre><code>&lt;?php
　　      if(isset($_POST[&#39;check&#39;])) {
     　　      $hash = md5($_COOKIE[&#39;cookie&#39;]);
          　　 if($_POST[&#39;check&#39;] == $hash) {
               　　 doJob();
　　           } else {
　　　　　　　　//...
          　　 }
　　      } else {
　　　　　　//...
　　      }
      ?&gt;
</code></pre><p>这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。<br>　　(2).验证码</p>
<p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p>
<p>　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>
<p>　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>
<p>　　以下我的实现:</p>
<p>　　1).先是令牌生成函数(gen_token())：</p>
<pre><code>&lt;?php
     function gen_token() {
 　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。
　　　　//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》
          $token = md5(uniqid(rand(), true));
          return $token;
     }
</code></pre><p>2).然后是Session令牌生成函数(gen_stoken())：</p>
<pre><code>&lt;?php
     　　function gen_stoken() {
　　　　　　$pToken = &quot;&quot;;
　　　　　　if($_SESSION[STOKEN_NAME]  == $pToken){
　　　　　　　　//没有值，赋新值
　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();
　　　　　　}    
　　　　　　else{
　　　　　　　　//继续使用旧的值
　　　　　　}
     　　}
     ?&gt;
</code></pre><p>3).WEB表单生成隐藏输入域的函数：　　</p>
<pre><code>&lt;?php
　　     function gen_input() {
     　　     gen_stoken();
　　          echo “&lt;input type=\”hidden\” name=\”&quot; . FTOKEN_NAME . “\”
          　　     value=\”&quot; . $_SESSION[STOKEN_NAME] . “\”&gt; “;
     　　}
     ?&gt;
</code></pre><p>4).WEB表单结构：</p>
<pre><code>&lt;?php
          session_start();
          include(”functions.php”);
     ?&gt;
     &lt;form method=”POST” action=”transfer.php”&gt;
          &lt;input type=”text” name=”toBankId”&gt;
          &lt;input type=”text” name=”money”&gt;
          &lt;? gen_input(); ?&gt;
          &lt;input type=”submit” name=”submit” value=”Submit”&gt;
     &lt;/FORM&gt;
</code></pre><p>5).服务端核对令牌：</p>
<p>　　这个很简单，这里就不再啰嗦了。</p>
<p>　　上面这个其实不完全符合“并行会话的兼容”的规则，大家可以在此基础上修改。</p>
<hr>
<p>文章转载自：<a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CRSF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一行代码解决Mac下NTFS不可写问题]]></title>
      <url>https://blog.palemoky.top/2016/12/18/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3Mac%E4%B8%8BNTFS%E4%B8%8D%E5%8F%AF%E5%86%99%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>令人头疼的NTFS终于可以随意写入了！</p>
<a id="more"></a>
<hr>
<h2 id="请注意：博主在使用过程中发现该方法会导致数据丢失，因此不再推荐使用此方法操作重要文件存储器。"><a href="#请注意：博主在使用过程中发现该方法会导致数据丢失，因此不再推荐使用此方法操作重要文件存储器。" class="headerlink" title="请注意：博主在使用过程中发现该方法会导致数据丢失，因此不再推荐使用此方法操作重要文件存储器。"></a><strong>请注意：博主在使用过程中发现该方法会导致数据丢失，因此不再推荐使用此方法操作重要文件存储器。</strong></h2><p>关于Mac系统下各种格式的兼容性请看我的另一篇文章——<a href="https://palemoky.github.io/2016/12/10/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E7%9A%84%E5%88%86%E5%8C%BA/" target="_blank" rel="noopener">移动硬盘的分区</a></p>
<p>今晚要上传优酷一个5G的视频，但优酷网页版限制黄金会员最大2G，提示客户端最大可上传15G，打开客户端又直接跳转到网页版，陷入这样的死循环我表示很无奈，然后用虚拟机上传，速度在100k以内，果断取消。视频转到Windows平台需要用U盘，手头有一个FAT32格式的U盘，要格式化为exFAT才能传4G+的文件，就在我备份U盘的时候，实在受不了这么麻烦了，要不就花130买一个Paragon NTFS for Mac吧，无意间竟然搜索到可以用命令来打开NTFS的写入功能，而且试验成功了，特记录此贴分享一下。</p>
<p>Mac版本：Sierra 10.12.2</p>
<p>打开终端，输入以下命令：<br><code>sudo vim /etc/fstab</code></p>
<p>然后输入：</p>
<pre><code>LABEL=NAME none ntfs rw,auto,nobrowse
</code></pre><p><em>请注意：这里的<strong>NAME</strong>请替换成你的磁盘名。</em></p>
<p>重启系统，已经可以随意写入数据了。</p>
<p>到这里，还是有一点小问题的，就是这个分区在finder里是不显示的，我们可以通过创建软连接的方式在桌面显示：</p>
<pre><code>sudo ln -s /Volumes/NAME ~/Desktop/NAME
</code></pre><p>结束了，你可以尽情享受NTFS的写入功能了。</p>
<hr>
<p>本文参考了以下资料：</p>
<p>中文资料：<a href="http://bbs.feng.com/read-htm-tid-9932031.html" target="_blank" rel="noopener">http://bbs.feng.com/read-htm-tid-9932031.html</a></p>
<p>英文资料：<a href="http://macdrug.com/write-ntfs-drive-macos-sierra/" target="_blank" rel="noopener">http://macdrug.com/write-ntfs-drive-macos-sierra/</a></p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> NTFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[下雪了]]></title>
      <url>https://blog.palemoky.top/2016/12/17/%E4%B8%8B%E9%9B%AA%E4%BA%86/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[VPS离线下载之二]]></title>
      <url>https://blog.palemoky.top/2016/12/15/VPS%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD%E4%B9%8B%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>解决VPS下载好的文件如何同步到百度云的问题。</p>
<a id="more"></a>
<p>现在我们已经将文件下载到我们的vps了，但怎么取回本地呢？</p>
<p>楼主首先尝试的是用wget命令下载到服务器，然后用FTP取回本地，后来测试发现FTP在同一时间、同一个文件上传在500KB/，下载最高50KB/，这也太鸡肋了，一番Google后发现可以使用<a href="https://github.com/houtianze/bypy" target="_blank" rel="noopener">Bypy</a>同步到百度云。</p>
<p>关于同步到百度云，由于已经有博主写了一篇很好的文章，我就全文转载了。</p>
<blockquote>
<p>前一段时间接了个小任务，要把YouTube上的几百个视频下载回来，用百度云网盘分享给公司的同事供学习使用。</p>
<p>当老板发邮件问我这事儿是否能办时，我很快就回复说没问题，因为“从YouTube下载视频”这种事之前我也不是没做过。网上有一大批在线工具能够嗅探出YouTube视频的下载链接，然后直接用常规手段（迅雷啥的）下载就可以了。本地下载工具也不少，如著名的IDM就能够直接下载网页上嵌套的视频文件，几乎是万能的。不过，这次的任务有点复杂：一来要下载的文件太多了，我总不能重复操作几百次来下载每个视频吧；二来，还得上传到百度云，这么多视频，靠我家里那小水管，没个几天几夜恐怕是上传不完的，多费劲呀。</p>
<p>然后我就开始琢磨这件事能不能更自动化、更高效一些来实现。呃，放狗上Google搜了一下，找到了几个大杀器，参考了一下各位大神的教程后，我也拼凑出了一个解决方案。</p>
<p>长话短说：</p>
<p>在美国VPS上安装YouTube专用下载工具，远程下载想要的YouTube视频到服务器上；在VPS上安装百度云网盘上传工具，将已经下载到VPS中的视频上传到云端。</p>
<p>这个方案的好处很明显：用位于美国的VPS下载本身服务器就在美国的YouTbe网站视频，速度相当快（实测可以超过60MB/s）。从美国VPS上传文件到百度云，速度虽然受限（一般是几百Kb每秒，偶见超过1MB/s的），但仍比我在国内本地的上传网速要快得多。更重要的是，这个方案是高度自动化、批量进行的，不用手动对付每个视频。</p>
<p>短话长说：</p>
<p>接下来要写的详细教程，是一个大杂烩。你在网上能找到的特定教程，都是有特定限制条件的，例如你的VPS用的是啥操作系统，你要实现多大程度的自动化，等等。在完成这个教程的过程中，我也踩了不少坑，幸亏有万能的Google相助。</p>
<h2 id="1-安装VPS操作系统"><a href="#1-安装VPS操作系统" class="headerlink" title="1 安装VPS操作系统"></a>1 安装VPS操作系统</h2><p>我用的是DigitalOcean（若使用我的推荐链接注册DigitalOcean，您的账户可以立即获得10美金，相当于免费获得两个月的使用权）最基础的套餐，每月5$，20G的SSD储存空间，1T流量。安装的操作系统是CentOS 7（请注意操作系统的选择，这很重要，后面我会提到原因），节点为旧金山（据说从大陆访问会比较快）。所以，如果你也是DO用户的话，可以完全照我这篇教程来做，准没问题。不是的话，请酌情参考就好了，其他问题我不负责解答哈，毕竟，我是一个伪技术流……</p>
<p>首先要赞下DigitalOcean的VPS用起来真是方便，点几下鼠标就能创建好一台服务器。理论上用SSH密钥登录会更安全，不过我偷懒，只是简单用LastPass生成一个几十位长度的随机密码，需要用到就复制粘贴一下好了（请大家不要向我学习……）。禁用root账号登录，修改SSH端口号什么的，这些安全措施也可以做下，我就不多说了，不太清楚的话请自行Google。</p>
<p>前面提过VPS的操作系统问题，为啥我用CentOS 7呢？因为这个版本默认自带的Python是2.7.5（截至本文发布时是这样的），而这个教程中会用到的百度云网盘Linux客户端（bypy）依赖的Python版本号为2.7x。一开始我装了个CentOS 6，其自带Python 6.x，不符合要求；Google了好多教程，还是没能装上Python 2.7x（在DO的这个系统上需要自行编译Python，各种报错很无奈）；最后决定放弃CentOS 6，换成7，因为有那个工夫折腾Python，我还不如去看几集美剧是吧，呃，好像我又无意中暴露了什么……</p>
<h2 id="2-安装youtube-dl"><a href="#2-安装youtube-dl" class="headerlink" title="2 安装youtube-dl"></a>2 安装youtube-dl</h2><p>传说中的第一个大杀器终于粗线了：youtube-dl。这个工具可以用来下载一系列国外网站的在线视频，如油管家的。它既有本地客户端，也可以被部署在服务器上。</p>
<p>用Putty登入VPS后，依次执行以下两条命令：</p>
<pre><code class="bash">wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
chmod a+rx /usr/local/bin/youtube-dl
</code></pre>
<p>然后就没了。是的就是这么简单，现在你已经装完youtube-dl，可以在VPS上远程下载指定的YouTube视频了。</p>
<p>最简单的命令如下：</p>
<p><code>youtube-dl video-url</code></p>
<p>把上面的这个video-url换成具体某个YouTube视频的URL就可以直接下载了。注意，youtube-dl会默认下载视频到当前执行命令的目录下。</p>
<p>YouTube有Playlist功能，即播放列表，你可以用Google账号登录，然后就可以把若干视频添加保存到Playlist。如果你想要批量下载某个Playlist的视频，就可以把前面那条下载命令中的 video-url换成具体Playlist的链接。话句话说，想要一次下载多个YouTube视频，你可以考虑用这个Playlist功能。</p>
<p>不过呢，像本文开头提到的这个任务，如果我要手动添加几百个视频到Playlist那得累到手抽筋：我得先点开每一个视频的具体链接，然后再点两下鼠标才能将之添加进Playlist。好了不绕弯了，说这么多，就是想烘托出youtube-dl的另一个激动人心的功能：支持读取下载链接列表文件。这意味着我可以先把所有下载链接整理好后放进一个txt文件，然后让youtube-dl去读取这个txt文件就行了，接下来它就会自动下载全部的视频。该方法的命令如下：</p>
<p><code>youtube-dl -a video_url.txt</code></p>
<p>这里的 -a 参数表示读取外部链接文件。</p>
<p>具体细节操作在后面会提到，请耐心往下看……</p>
<h2 id="3-安装byby"><a href="#3-安装byby" class="headerlink" title="3 安装byby"></a>3 安装byby</h2><p>Byby是一个百度云网盘的Python客户端，可在Linux环境下通过命令行来操作。</p>
<p>在本文的操作环境下，安装byby需要更多的步骤，byby官网没有介绍那么详细，所以我参考了其他网友的教程。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><code>yum install git</code></p>
<h3 id="安装Python-Pip"><a href="#安装Python-Pip" class="headerlink" title="安装Python Pip"></a>安装Python Pip</h3><pre><code class="bash">yum -y install epel-release
yum -y install python-pip
yum clean all
</code></pre>
<p>说明：先装扩展源EPEL再装Python Pip才不会报错。</p>
<h3 id="安装Requests"><a href="#安装Requests" class="headerlink" title="安装Requests"></a>安装Requests</h3><p>pip install requests</p>
<p>完成以上步骤后，才开始正式安装bypy。</p>
<p>依次执行以下三行命令：</p>
<pre><code class="bash">git clone https://github.com/houtianze/bypy byby/
cd byby/
python bypy.py list
</code></pre>
<p>此时的命令行界面会出现提示，按照以下步骤来授权你的百度云账号使用bypy客户端：</p>
<p>左键选中用于百度账号授权的那行URL，即可复制该文本（在Putty中选中即可复制，不用Ctrl+C），在浏览器中打开此链接。<br>登录你的百度账号，然后复制授权码。<br>回到Putty命令行界面，粘贴授权码进去，回车即可开始启动授权操作。<br>稍等几秒，授权即可成功。</p>
<p>为了方便在任意目录下使用bypy命令，还需要设置如下：</p>
<pre><code class="bash">cd /byby
cp bypy.py /usr/bin
</code></pre>
<p>完成以上设置后，如果要将VPS某个文件夹下的所有文件上传到百度云，最简单的命令如下：</p>
<p><code>bypy.py upload</code></p>
<p>还可以加参数，如 -v 可以显示上传进度：</p>
<p><code>bypy.py upload -v</code></p>
<p>默认情况下，本方案上传到百度云的文件全部存放在“我的应用数据 –&gt; bypy”路径下。</p>
<h2 id="4-下载与上传视频"><a href="#4-下载与上传视频" class="headerlink" title="4 下载与上传视频"></a>4 下载与上传视频</h2><p>在Putty命令行界面中创建一个专门的目录用于存放下载的视频文件，然后CD至此目录下，创建一个包含所有下载链接的txt文件（使用vi命令即可）。在此目录下，执行下载命令：</p>
<p><code>youtube-dl -c -i -a video_url.txt</code></p>
<p>呃，眼尖的你可能已经发现了，上面这条命令好像多出了两个参数？没错，youtube-dl提供了很多有用的附加参数，这里用到的是：</p>
<p>-c 断点续传（如果由于意外原因下载中断了，再次启动下载命令时，可以实现断点续传）<br>-i 忽略报错（如果出现某些链接无法打开或者下载的问题，会自动绕过，继续下载其他视频）<br>下载的话一般很快，但是上传到百度云并没有那么快。为了防止关闭Putty窗口后，下载/上传进程就断掉了，可以考虑使用Screen远程会话管理功能。简单介绍就是，有了这玩意儿，你可以在Putty中启动下载或者上传进程，让其在后台运行，然后关掉Putty离开电脑旁该干啥干啥去，有需要的话回来重新打开窗口就可以看到进程依然在跑。</p>
<p>要检查操作系统是否支持screen，可以直接输入screen然后回车，如果提示找不到这个命令，那就是系统还没安装好这个东西。在CentOS 7中安装screen很简单，一条命令而已：</p>
<p><code>yum install screen</code></p>
<p>安装完毕后，输入 screen -S sessionname 即可创建一个名为 sessionname 的screen会话窗口。在此窗口中执行想要做的任务，然后同时按下 ctrl + a，松开后按下 d，即可将此session放到后台去运行，并回到之前的对话窗口。在非screen对话窗口中，输入 screen -ls 可以列举已有的screen进程。输入 “screen -r 进程代码” 就可以再次调出正在运行的screen进程。</p>
<p>由于我要上传到百度云的文件太多了，我不可能守在电脑前等它完成所有任务，所以screen这个功能还是非常实用的。</p>
<p>本文主要参考链接：<br><a href="https://github.com/rg3/youtube-dl/" target="_blank" rel="noopener">https://github.com/rg3/youtube-dl/</a><br><a href="https://github.com/houtianze/bypy" target="_blank" rel="noopener">https://github.com/houtianze/bypy</a><br><a href="http://yesido.info/2015/03/linux-upload-document-to-baidu-cloud/（编者按：链接已失效）" target="_blank" rel="noopener">http://yesido.info/2015/03/linux-upload-document-to-baidu-cloud/（编者按：链接已失效）</a></p>
</blockquote>
<p>原文链接：<a href="http://www.typemylife.com/use-vps-download-videos-from-youtube-upload-to-baidu-cloud/" target="_blank" rel="noopener">http://www.typemylife.com/use-vps-download-videos-from-youtube-upload-to-baidu-cloud/</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 离线下载 </tag>
            
            <tag> VPS </tag>
            
            <tag> 百度云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VPS离线下载之一]]></title>
      <url>https://blog.palemoky.top/2016/12/13/VPS%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD%E4%B9%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>有一台VPS可以做各种各样好玩儿的东西，这不，楼主开始折腾离线下载了。</p>
<a id="more"></a>
<h1 id="离线下载概述"><a href="#离线下载概述" class="headerlink" title="离线下载概述"></a>离线下载概述</h1><p>既然我们要使用服务器离线下载，首先来了解一下离线下载的原理：<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD.png" alt=""></p>
<p>那么离线下载有什么优势呢？</p>
<ol>
<li>对于一些慢速的大文件，可以扔到服务器上慢慢下，下好了再取回本地，避免长时间的等待；</li>
<li>如果你的vps位于国外，有些资源的下载vps速度更快，本地你可能耗时一整天都不一定能下完，就算下完了也可能是一个损坏的文件包，而vps几乎可以做到秒下，然后将下载好的资源同步到国内的百度云，这样绕个弯子会节省不少的时间。</li>
</ol>
<h1 id="离线下载方式"><a href="#离线下载方式" class="headerlink" title="离线下载方式"></a>离线下载方式</h1><p>在Linux系统中有这样几种命令行下载方式：</p>
<h3 id="1-wget"><a href="#1-wget" class="headerlink" title="1. wget"></a>1. wget</h3><p>wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>
<h3 id="2-curl"><a href="#2-curl" class="headerlink" title="2. curl"></a>2. curl</h3><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。</p>
<h3 id="3-axel"><a href="#3-axel" class="headerlink" title="3. axel"></a>3. axel</h3><p>axel是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。</p>
<h3 id="4-aria2"><a href="#4-aria2" class="headerlink" title="4. aria2"></a>4. aria2</h3><p>Aria2是一个基于命令行的开源下载工具，支持多协议、多来源(HTTP/HTTPS、FTP、BitTorrent、Metalink协议等)、多线程的下载。它比axel优秀的地方在于完全支持BitTorrent协议，同时可以作为BitTorrent客户端来下载种子文件,支持Metalink协议,远程控制(通过web端)下载进程。</p>
<p>主要优势如下：</p>
<ul>
<li>高速，自动多线程下载；</li>
<li>断点续传；</li>
<li>轻量占用内存非常少，通常情况平均4~9MB内存占用(官方介绍)；</li>
<li>多平台。支援 Win/Linux/OSX/Android 等操作系统下的部署；</li>
<li>模块化。分段下载引擎，文件整合速度快；</li>
<li>支持RPC界面远程；</li>
<li>全面支持BitTorrent协议；</li>
</ul>
<p>Aria2官方项目页面：<a href="https://aria2.github.io/" target="_blank" rel="noopener">https://aria2.github.io/</a></p>
<p>关于Aria2的安装和使用教程请参见：<a href="http://www.hi-linux.com/2016/05/09/CentOS%E4%B8%8B%E6%90%AD%E5%BB%BAAria2%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">CentOS下搭建Aria2远程下载环境</a></p>
<h3 id="5-各种下载工具的比较"><a href="#5-各种下载工具的比较" class="headerlink" title="5. 各种下载工具的比较"></a>5. 各种下载工具的比较</h3><table>
<thead>
<tr>
<th style="text-align:center">协议</th>
<th style="text-align:center">wget</th>
<th style="text-align:center">curl</th>
<th style="text-align:center">axel</th>
<th style="text-align:center">aria</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HTTP(S)</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
<tr>
<td style="text-align:center">FTP</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
<tr>
<td style="text-align:center">SFTP</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td style="text-align:center">BitTorrent</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
</tr>
<tr>
<td style="text-align:center">Metalink</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
</tr>
<tr>
<td style="text-align:center">Telnet</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td style="text-align:center">IMAP</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td style="text-align:center">POP3</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td style="text-align:center">SMTP</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 离线下载 </tag>
            
            <tag> aria2 </tag>
            
            <tag> wget </tag>
            
            <tag> curl </tag>
            
            <tag> axel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[增强你的Mac词典]]></title>
      <url>https://blog.palemoky.top/2016/12/12/%E8%AE%A9%E4%BD%A0%E7%9A%84Mac%E8%AF%8D%E5%85%B8%E6%9B%B4%E5%BC%BA%E5%A4%A7/</url>
      <content type="html"><![CDATA[<p>Mac自带的词典功能远比你想象的强大,你完全可以自定义你的词典。</p>
<a id="more"></a>
<p>Mac自带的词典功能，不仅能用三指轻触查询，如果你对词典不满意，还可以自己添加词典，如牛津、朗文、英汉、汉英、法汉、德汉、汉法、汉德、日汉、汉日；甚至康熙大辞典，以及湘雅医学专业词典。只要你能找到合适的词典包即可。所以完全没有必要安装有道词典等第三方词典。</p>
<h3 id="1-下载词典转换工具"><a href="#1-下载词典转换工具" class="headerlink" title="1 下载词典转换工具"></a>1 下载词典转换工具</h3><p>DictUnifier下载地址：<a href="https://github.com/jjgod/mac-dictionary-kit" target="_blank" rel="noopener">https://github.com/jjgod/mac-dictionary-kit</a></p>
<h3 id="2-下载词典包"><a href="#2-下载词典包" class="headerlink" title="2 下载词典包"></a>2 下载词典包</h3><p>词典包下载地址：<a href="http://abloz.com/huzheng/stardict-dic/zh_CN/" target="_blank" rel="noopener">http://abloz.com/huzheng/stardict-dic/zh_CN/</a></p>
<h3 id="3-词典转换"><a href="#3-词典转换" class="headerlink" title="3 词典转换"></a>3 词典转换</h3><p>打开DictUnifier，然后将下载好的词典包拖拽到DictUnifier中，按照提示操作即可。</p>
<p>一般来说，词典包安装后，Dictionary会自动打开，这时你就会发现新增的词典了。</p>
<p>特别提醒：有些Mac OS版本，需要在Dictionary的偏好设置里面（command加逗号），把需要的词典勾选一下～</p>
<h3 id="4-删除词典"><a href="#4-删除词典" class="headerlink" title="4 删除词典"></a>4 删除词典</h3><p>对于不想要的词典：</p>
<ol>
<li>在Dictionary界面不显示——在Dictionary的“系统设置”里面，把不想用的词典前面的“对勾”去掉</li>
<li>想完全删去——在下面这两个文件夹内，找到相应的.dictionary文件，delete<ul>
<li>Macintosh HD/Library/Dictionaries文件夹</li>
<li>Macintosh HD/Users/你的用户名/Library/Dictionaries文件夹</li>
</ul>
</li>
</ol>
<p>一篇详细的英文参考教程：<a href="https://davidtse916.wordpress.com/2008/01/24/adding-dictionaries-to-the-built-in-dictionary-application-in-leopard/" target="_blank" rel="noopener">https://davidtse916.wordpress.com/2008/01/24/adding-dictionaries-to-the-built-in-dictionary-application-in-leopard/</a></p>
<h3 id="其他词典工具推荐"><a href="#其他词典工具推荐" class="headerlink" title="其他词典工具推荐"></a>其他词典工具推荐</h3><p>GoldenDict是一个开源的词典项目，可在Windows、Mac、Linux全平台下使用，而且支持中文，项目主页<a href="https://github.com/goldendict/goldendict/wiki" target="_blank" rel="noopener">https://github.com/goldendict/goldendict/wiki</a></p>
<p>GoldenDict添加网络词典教程：<a href="https://www.shanbay.com/team/thread/34543/938905/" target="_blank" rel="noopener">https://www.shanbay.com/team/thread/34543/938905/</a></p>
<p>GoldenDict添加本地词典教程：<a href="http://jingyan.baidu.com/article/f25ef254459199482c1b829c.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/f25ef254459199482c1b829c.html</a></p>
<p>与GoldenDict类似的还有StarDict，不过该项目因为版权问题已经停止维护了。</p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 词典 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何让你的博客被Google收录]]></title>
      <url>https://blog.palemoky.top/2016/12/11/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A2%ABGoogle%E6%94%B6%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>hexo搭建的博客快速让Google收录教程</p>
<a id="more"></a>
<h3 id="1-注册一个谷歌账号"><a href="#1-注册一个谷歌账号" class="headerlink" title="1 注册一个谷歌账号"></a>1 注册一个谷歌账号</h3><p>打开<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google搜索引擎提交入口</a></p>
<h3 id="2-下载验证文件"><a href="#2-下载验证文件" class="headerlink" title="2 下载验证文件"></a>2 下载验证文件</h3><p><img src="http://babymaychen.github.io/uploads/downloadCheck.png" alt="验证文件"></p>
<p>下载Google的验证文件之后，需要在文件开头添加layout: false来取消hexo对其进行的转换，如下：</p>
<pre><code>$ cat source/google0b4c8a25b65d7c2a.html
layout: false
---
google-site-verification: google0b4c8a25b65d7c2a.html
</code></pre><h3 id="3-将验证文件放入网站的根目录"><a href="#3-将验证文件放入网站的根目录" class="headerlink" title="3 将验证文件放入网站的根目录"></a>3 将验证文件放入网站的根目录</h3><p>以GitHub为例，打开博客主页，点击”Upload files”，将验证文件放入项目根目录</p>
<h3 id="4-访问验证文件"><a href="#4-访问验证文件" class="headerlink" title="4 访问验证文件"></a>4 访问验证文件</h3><p>然后打开浏览器输入：http://你的网站域名/你下载的验证文件名字.html ，如果你看到了一串字符(注：只有一串字符)，那就成功了。</p>
<h3 id="5-添加站点地图"><a href="#5-添加站点地图" class="headerlink" title="5 添加站点地图"></a>5 添加站点地图</h3><p>什么是站点地图呢？Google的解释是:</p>
<blockquote>
<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>
</blockquote>
<p>对于使用Hexo写博客的小伙伴来说，可以使用 hexo-generator-sitemap 插件来生成Sitemap。插件的使用很简单，只需要下载即可：</p>
<p><code>npm install hexo-generator-sitemap --save</code></p>
<p>在博客根目录的_config.yml中添加如下代码：</p>
<pre><code>sitemap:
    path: sitemap.xml
</code></pre><p>这里的缩进很重要(不解释，试一下就知道了),然后编译并部署博客。</p>
<h3 id="6-让Google收录博客"><a href="#6-让Google收录博客" class="headerlink" title="6 让Google收录博客"></a>6 让Google收录博客</h3><p>向<a href="https://www.google.com/webmasters/tools" target="_blank" rel="noopener">Google站长工具</a>提交sitemap</p>
<p>添加了站点验证通过后，选择站点，之后在抓取——站点地图中就能看到添加/测试站点地图<br><img src="http://babymaychen.github.io/uploads/sitemap.png" alt=""></p>
<p>本文参考了以下文章：<a href="http://babymaychen.github.io/2016/07/20/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A2%ABGoogle%E5%88%B0/" target="_blank" rel="noopener">孙小妹的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令总结]]></title>
      <url>https://blog.palemoky.top/2016/12/11/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>这可能是东半球最详细的Git命令总结了:-)</p>
<a id="more"></a>
<blockquote>
<p>Git使用教程——<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">《Pro Git》</a><br><br><br>Git视频教程<a href="http://study.163.com/course/courseMain.htm?courseId=1003268008" target="_blank" rel="noopener">人人都会用git</a><br><br><br>git在本地分为3个区：工作区，暂存区和本地仓库。<br><br><br>Git更像是把数据看作是对小型文件系统的一组快照。每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个快照流。<br><br><br>git中任何<em>已提交</em>的东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 –amend 选项覆盖的提交也可以恢复<br><br><br><a href="https://dotblogs.com.tw/wasichris/2016/04/29/225157" target="_blank" rel="noopener">[Git] Reset - mixed, hard and soft
</a><br><a href="https://www.zybuluo.com/phper/note/223883" target="_blank" rel="noopener">git pull和git fetch、git reset 和 git revert 的区别用法</a></p>
</blockquote>
<hr>
<h1 id="一、本地操作"><a href="#一、本地操作" class="headerlink" title="一、本地操作"></a>一、本地操作</h1><h2 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git init [directory]</code></td>
<td>初始化git本地仓库</td>
</tr>
<tr>
<td>`git reset –hard commit-id</td>
<td>HEAD^</td>
<td>HEAD~1`</td>
<td>版本回退,结合<code>git reflog</code>可前进操作</td>
</tr>
<tr>
<td><code>git relog</code></td>
<td>查看git历史操作命令</td>
</tr>
<tr>
<td><code>git rm --cached file_name</code></td>
<td>删除暂存区的文件,如果暂存区的文件<strong>被修改</strong>，则<strong>需要使用<code>-f</code>参数</strong></td>
</tr>
<tr>
<td><code>git mv file_from file_to</code></td>
<td>修改文件名</td>
</tr>
<tr>
<td><code>git reset HEAD filename</code></td>
<td>取消暂存的文件（丢弃<code>git add</code>后的文件）</td>
</tr>
<tr>
<td><code>git checkout .</code></td>
<td>丢弃工作区所有文件的修改</td>
</tr>
<tr>
<td><code>git checkout -- filename</code></td>
<td>丢弃工作区指定文件的修改（ <em>注意文件名前的空格</em> ）</td>
</tr>
<tr>
<td><code>git checkout HEAD .</code></td>
<td>丢弃工作区与暂存区的所有文件的修改</td>
</tr>
<tr>
<td><code>git checkout HEAD -- filename</code></td>
<td>丢弃总做区与暂存区指定文件的修改</td>
</tr>
<tr>
<td><code>git config --list</code></td>
<td>查看git的配置信息</td>
</tr>
</tbody>
</table>
<h2 id="1-2-克隆"><a href="#1-2-克隆" class="headerlink" title="1.2 克隆"></a>1.2 克隆</h2><p>Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>
<p>克隆命令：<code>git clone git@github.com:user/repo.git  [local_repo_name]</code><br>clone时端口号不为默认的22时，需将命令修改为 <code>$git clone ssh://user@host:port/user/repo.git [local_repo_name]</code></p>
<h2 id="1-3-比较"><a href="#1-3-比较" class="headerlink" title="1.3 比较"></a>1.3 比较</h2><p><code>git diff</code>查看工作区与暂存区文件的差异<br><code>git diff --cached</code>查看暂存区与本地仓库的文件差异<br><code>git diff HEAD</code>查看工作区与本地仓库的文件差异</p>
<h2 id="1-4-提交"><a href="#1-4-提交" class="headerlink" title="1.4 提交"></a>1.4 提交</h2><p><code>git commit -m &#39;description&#39;</code><br><code>git commit -a -m &#39;description&#39;</code>将<code>git add</code>与<code>git commit</code>命令合并使用，此时会自动将已跟踪的文件加入暂存并提交<br><code>git commit --amend</code>修改提交信息。若文件A已经提交，然后发现文件B忘记提交，可以执行<code>git add B</code>后执行<code>git commit --amend</code>，来实现A，B同时提交的效果。</p>
<h2 id="1-5-储藏"><a href="#1-5-储藏" class="headerlink" title="1.5 储藏"></a>1.5 储藏</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git stash</code></td>
<td>将当前工作区内容储藏</td>
</tr>
<tr>
<td><code>git stash list</code></td>
<td>查看储藏的所有内容</td>
</tr>
<tr>
<td><code>git stash show -p stash@{n}</code></td>
<td>显示储藏内容</td>
</tr>
<tr>
<td><code>git stash apply</code></td>
<td>将最近储藏的文件取回到工作区，栈中仍存在该储藏文件</td>
</tr>
<tr>
<td><code>git stash apply stash@{n}</code></td>
<td>取出指定储藏的文件</td>
</tr>
<tr>
<td><code>git stash pop</code></td>
<td>应用储藏并删除栈中内容</td>
</tr>
<tr>
<td><code>git stash drop stash@{n}</code></td>
<td>丢弃储藏内容</td>
</tr>
<tr>
<td><code>git stash -u</code></td>
<td>暂存未被跟踪的文件</td>
</tr>
</tbody>
</table>
<h2 id="1-6-查看历史"><a href="#1-6-查看历史" class="headerlink" title="1.6 查看历史"></a>1.6 查看历史</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git log</code></td>
<td>显示详细记录</td>
</tr>
<tr>
<td><code>git log -p -2</code></td>
<td>查看最近2次的提交信息，包括被改动的内容</td>
</tr>
<tr>
<td><code>git log --stat</code></td>
<td>显示每次提交的统计信息</td>
</tr>
<tr>
<td><code>git log --pretty=oneline</code> 或 <code>git log --oneline</code></td>
<td>简要显示提交信息</td>
</tr>
<tr>
<td><code>git log --graph</code></td>
<td>图形化显示分支、合并历史</td>
</tr>
</tbody>
</table>
<p><br></p>
<center> <code>git log</code>输出选项</center>

<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>-n</code></td>
<td style="text-align:left">仅显示最近的n条提交</td>
</tr>
<tr>
<td style="text-align:left"><code>--since</code>, <code>--after</code></td>
<td style="text-align:left">仅显示指定时间之后的提交</td>
</tr>
<tr>
<td style="text-align:left"><code>--until</code>, <code>--before</code></td>
<td style="text-align:left">仅显示指定时间之前的提交</td>
</tr>
<tr>
<td style="text-align:left"><code>--author</code></td>
<td style="text-align:left">仅显示指定作者相关的提交</td>
</tr>
<tr>
<td style="text-align:left"><code>--committer</code></td>
<td style="text-align:left">仅显示指定提交者的相关提交</td>
</tr>
<tr>
<td style="text-align:left"><code>--grep</code></td>
<td style="text-align:left">仅显示含指定关键字的提交</td>
</tr>
<tr>
<td style="text-align:left"><code>--decorate</code></td>
<td style="text-align:left">查看指针情况</td>
</tr>
<tr>
<td style="text-align:left"><code>-S</code></td>
<td style="text-align:left">仅显示添加或移除了某个关键字的提交</td>
</tr>
</tbody>
</table>
<h2 id="1-7-变基"><a href="#1-7-变基" class="headerlink" title="1.7 变基"></a>1.7 变基</h2><p><strong>请勿在本地仓库外有副本的分支执行变基操作！</strong><br>变基能够让提交历史变得更加简洁。<br>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作。<br><code>git rebase master dev</code>将dev分支内容变基到master分支上</p>
<p>变基前：<br><img src="http://ohx73ws1b.bkt.clouddn.com/git%20branch.png" alt=""></p>
<p>变基后：<br><img src="http://ohx73ws1b.bkt.clouddn.com/git%20rebase.png" alt=""></p>
<p>假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改，因为它们还需要经过更全面的测试。 这时，你就可以使用 git rebase 命令的 –onto 选项，选中在 client 分支里但不在 server 分支里的修改（即 C8 和 C9），将它们在 master 分支上重放：<code>$ git rebase --onto master server client</code><br>多分支变基前：<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%98%E5%9F%BA.png" alt=""><br>多分支变基后</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%A4%9A%E5%88%86%E6%94%AF%E5%8F%98%E5%9F%BA%E7%BB%93%E6%9E%9C.png" alt=""></h2><h1 id="二、远程仓库"><a href="#二、远程仓库" class="headerlink" title="二、远程仓库"></a>二、远程仓库</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git remote</code></td>
<td>显示本地仓库关联的所有远程仓库</td>
</tr>
<tr>
<td><code>git remote -v</code></td>
<td>显示远程仓库的URL</td>
</tr>
<tr>
<td><code>git remote add local-repo-name url</code></td>
<td>关联远程仓库</td>
</tr>
<tr>
<td><code>git remote rm local-repo-name</code></td>
<td>取消与远程仓库的关联</td>
</tr>
<tr>
<td><code>git fetch remote-name</code></td>
<td>拉取远程仓库的所有分支</td>
</tr>
<tr>
<td><code>git push remote-name branch-name</code></td>
<td>将当前分支推送到远程分支</td>
</tr>
<tr>
<td><code>git remote show [remote-name]</code></td>
<td>显示指定远程仓库的详细信息</td>
</tr>
<tr>
<td><code>git remote rename old-name new-name</code></td>
<td>重命名远程仓库名</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="三、分支"><a href="#三、分支" class="headerlink" title="三、分支"></a>三、分支</h1><h2 id="3-1-基础命令"><a href="#3-1-基础命令" class="headerlink" title="3.1 基础命令"></a>3.1 基础命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git branch branch-name [commit-hash]</code></td>
<td>新建分支</td>
</tr>
<tr>
<td><code>git checkout branch-name</code></td>
<td>切换分支</td>
</tr>
<tr>
<td><code>git checkout -b branch-name</code></td>
<td>新建并切换到新分支</td>
</tr>
<tr>
<td><code>git branch</code></td>
<td>查看本地分支</td>
</tr>
<tr>
<td><code>git branch -r</code></td>
<td>查看远程分支</td>
</tr>
<tr>
<td><code>git branch -a</code></td>
<td>查看所有分支</td>
</tr>
<tr>
<td><code>git branch -d branch-name</code></td>
<td>删除分支</td>
</tr>
<tr>
<td><code>git merge branch-name</code></td>
<td>合并分支到当前分支</td>
</tr>
<tr>
<td><code>git branch --merged</code></td>
<td>查看已经合并分支</td>
</tr>
<tr>
<td><code>git branch --no-merged</code></td>
<td>查看尚未合并的分支</td>
</tr>
<tr>
<td><code>git branch -v</code></td>
<td>查看分支的最后一次提交</td>
</tr>
<tr>
<td><code>git branch -vv</code></td>
<td>查看本地分支的跟踪分支, 示例<a href="https://git-scm.com/book/zh/v2/Git-分支-远程分支" target="_blank" rel="noopener">点此</a></td>
</tr>
<tr>
<td><code>git push origin test:master</code></td>
<td>本地分支test推送给远程master分支（若master不存在，则自动创建）</td>
</tr>
<tr>
<td><code>git push origin :test</code> 或 <code>git push origin --delete test</code></td>
<td>删除远程test分支</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="3-2-分支合并"><a href="#3-2-分支合并" class="headerlink" title="3.2 分支合并"></a>3.2 分支合并</h2><p>分支合并时直接会将内容覆盖</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/branch_merge.png" alt="分支合并"></p>
<p><br></p>
<h2 id="3-3-分支冲突"><a href="#3-3-分支冲突" class="headerlink" title="3.3 分支冲突"></a>3.3 分支冲突</h2><p>仅当修改<strong>同一文件的同一区域</strong>的时候才会产生冲突，git无法执行“快速合并”（如下图）的合并就可能产生冲突</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/branch_conflict.png" alt="分支冲突"><br>分支冲突解决后，需要使用<code>git add</code>和<code>git commit</code>命令再次提交</p>
<p><br></p>
<blockquote>
<p>由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？</p>
</blockquote>
<hr>
<h1 id="四、Github中的项目地址"><a href="#四、Github中的项目地址" class="headerlink" title="四、Github中的项目地址"></a>四、Github中的项目地址</h1><ul>
<li>HTTPS形式：<code>https://github.com/&lt;user&gt;/&lt;project_name&gt;</code></li>
<li>SSH形式：<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:<user>/&lt;project_name&gt;`</user></li>
<li>通常对于公开项目可以优先分享基于 HTTPS 的 URL，因为用户克隆项目不需要有一个 GitHub 帐号。 如果你分享 SSH URL，用户必须有一个帐号并且上传 SSH 密钥才能访问你的项目。 HTTPS URL 与你贴到浏览器里查看项目用的地址是一样的。</li>
</ul>
<hr>
<h1 id="五、使用Git-Hooks实现项目自动部署"><a href="#五、使用Git-Hooks实现项目自动部署" class="headerlink" title="五、使用Git Hooks实现项目自动部署"></a>五、使用Git Hooks实现项目自动部署</h1><p>YouTube视频教程：<a href="https://www.youtube.com/watch?v=7-qAb4YZF2g" target="_blank" rel="noopener">Git deploy to staging server using post-receive hook<br>Auto-Buffer Options</a><br>git钩子教程：<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">Git钩子</a></p>
<h2 id="第一步：在服务器上创建一个git裸仓库"><a href="#第一步：在服务器上创建一个git裸仓库" class="headerlink" title="第一步：在服务器上创建一个git裸仓库"></a>第一步：在服务器上创建一个git裸仓库</h2><p><code>$ sudo git init --bare sample.git  #创建一个名为sample的git裸仓库</code></p>
<h2 id="第二步：配置裸仓库下的hooks文件夹的下post-receive（若该文件不存在请手动创建），配置内容为："><a href="#第二步：配置裸仓库下的hooks文件夹的下post-receive（若该文件不存在请手动创建），配置内容为：" class="headerlink" title="第二步：配置裸仓库下的hooks文件夹的下post-receive（若该文件不存在请手动创建），配置内容为："></a>第二步：配置裸仓库下的hooks文件夹的下post-receive（若该文件不存在请手动创建），配置内容为：</h2><pre><code>#!/bin/sh
GIT_WORK_TREE=/home/wwwroot/wxsxy/wxsxy git checkout -f  # 此处设置你要部署的项目目录即可
</code></pre><p>然后为此脚本赋予可执行权限<code>chmod +x post-receive</code></p>
<h2 id="第三步：（目前方法一存在无法推送的问题）"><a href="#第三步：（目前方法一存在无法推送的问题）" class="headerlink" title="第三步：（目前方法一存在无法推送的问题）"></a>第三步：（目前方法一存在无法推送的问题）</h2><h3 id="方法一：本地仓库关联远程裸仓库"><a href="#方法一：本地仓库关联远程裸仓库" class="headerlink" title="方法一：本地仓库关联远程裸仓库"></a>方法一：本地仓库关联远程裸仓库</h3><p><code>git remote add origin ssh://root@107.182.180.235:26972/home/bare.git（端口号非默认22的情况 ）</code><br>然后本地仓库中代码编辑完成后推送至远程裸仓库，裸仓库会自动将代码部署到服务器的项目地址下<br><code>git push origin master</code></p>
<h3 id="方法二：git-clone裸仓库（克隆自动关联），然后在裸仓库中添加代码推送即可"><a href="#方法二：git-clone裸仓库（克隆自动关联），然后在裸仓库中添加代码推送即可" class="headerlink" title="方法二：git clone裸仓库（克隆自动关联），然后在裸仓库中添加代码推送即可"></a>方法二：git clone裸仓库（克隆自动关联），然后在裸仓库中添加代码推送即可</h3><hr>
<h1 id="六、git的配置"><a href="#六、git的配置" class="headerlink" title="六、git的配置"></a>六、git的配置</h1><p>设置用户名与邮件地址</p>
<pre><code class="git">$ git config --global user.name &quot;John Doe&quot;
$ git config --global user.email johndoe@example.com
</code></pre>
<p>查看配置信息<br><code>git config --list</code><br>git别名设置</p>
<pre><code class="git">$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.unstage &#39;reset HEAD --&#39;
$ git config --global alias.last &#39;log -1 HEAD&#39;
</code></pre>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 备份 </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件的恢复]]></title>
      <url>https://blog.palemoky.top/2016/12/10/%E6%96%87%E4%BB%B6%E7%9A%84%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<p>相信大家都会有丢失文件的经历，接下来，我们就来谈谈在哪里能够买到”后悔药”。<br><a id="more"></a></p>
<h3 id="方法一-使用具有定时备份功能的移动硬盘"><a href="#方法一-使用具有定时备份功能的移动硬盘" class="headerlink" title="方法一 使用具有定时备份功能的移动硬盘"></a>方法一 使用具有定时备份功能的移动硬盘</h3><p>比如我的WD My Passport Ultra就有定时备份的功能，而且可以对硬盘进行加密，从而保证数据的安全</p>
<h3 id="方法二-使用Windows的备份功能"><a href="#方法二-使用Windows的备份功能" class="headerlink" title="方法二 使用Windows的备份功能"></a>方法二 使用Windows的备份功能</h3><p>在控制面板中进行设置备份功能，好想很少人使用啊</p>
<h3 id="方法三-在Mac下使用Time-Machine"><a href="#方法三-在Mac下使用Time-Machine" class="headerlink" title="方法三 在Mac下使用Time Machine"></a>方法三 在Mac下使用Time Machine</h3><p>Mac下的Time Machine是一款非常好用的备份工具，不过我们需要设置好备份哪些文件，这样才能在后悔的时候挽救我们</p>
<h3 id="方法四-使用Mac自带的文本编辑工具"><a href="#方法四-使用Mac自带的文本编辑工具" class="headerlink" title="方法四 使用Mac自带的文本编辑工具"></a>方法四 使用Mac自带的文本编辑工具</h3><p>这个工具我个人觉得不是很好用，但它隐藏了一个十分实用的功能——恢复被修改的文件。<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91.jpg" alt="恢复文件"></p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95.png" alt="文稿历史记录"></p>
<h3 id="方法五-使用git"><a href="#方法五-使用git" class="headerlink" title="方法五 使用git"></a>方法五 使用git</h3><p>git作为如今最为流行的版本管理工具，这应该是这个世界上最好的备份管理工具了，当你丢过一次代码或把代码搞的很乱的时候就知道它有多么重要了。不过这个工具对于普通用户有一定的学习成本，但如果一个程序员说你不会git那就要面壁了。</p>
]]></content>
      
        <categories>
            
            <category> 日常技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 备份 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客插件推荐]]></title>
      <url>https://blog.palemoky.top/2016/12/10/%E5%8D%9A%E5%AE%A2%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<p>个人比较喜欢的几款插件，如果你有不错的插件，欢迎在评论区推荐。<br><a id="more"></a></p>
<p><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">文章加密</a></p>
<p><a href="https://github.com/MikeCoder/hexo-tag-cloud" target="_blank" rel="noopener">标签云</a></p>
<p><a href="https://github.com/yumemor/hexo-theme-primer" target="_blank" rel="noopener">primer主题</a></p>
<p><a href="https://github.com/A-limon/pacman" target="_blank" rel="noopener">pacman主题</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows常见网络故障及解决办法]]></title>
      <url>https://blog.palemoky.top/2016/12/10/%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C%E5%88%A4%E6%96%AD/</url>
      <content type="html"><![CDATA[<p>日常生活中，我们总是会在Windows中遇到莫名其妙其妙的网络问题，今天，博主就自己遇到的网络问题及解决办法与各位分享一下。<br><a id="more"></a></p>
<p>如果电脑不能正常上网，请按照以下步骤进行尝试修复：</p>
<ol>
<li><p>网络图标有黄色感叹号</p>
<p>解决办法：命令行(Windows+R)运行命令“netsh winsock reset ”后重启即可。</p>
</li>
<li><p>笔记本的WiFi物理开关是否打开</p>
<p>解决办法：找到WiFi开关并打开</p>
</li>
<li><p>动态IP或静态IP是否设置正确<br><img src="http://ohx73ws1b.bkt.clouddn.com/DHCP%E8%AE%BE%E7%BD%AE.png" alt=""></p>
<p> 解决办法：根据自己的网络情况正确设置图示页面，通常家用路由器环境保持图示设置即可。</p>
</li>
<li><p>WLAN服务是否启用<br> <img src="http://ohx73ws1b.bkt.clouddn.com/%E5%90%AF%E5%8A%A8WLAN%E6%9C%8D%E5%8A%A1.png" alt=""></p>
<p> 解决办法：打开计算机管理，查看WLAN服务状态，未启用则设置为“自动”</p>
</li>
<li><p>网络设备驱动器有黄色感叹号</p>
<p>解决办法：使用“驱动精灵”或“驱动人生”等工具尝试修复驱动</p>
</li>
<li><p>是否启用了一个无效的代理</p>
<p>解决办法：重新更换有效代理或不使用代理</p>
</li>
<li><p>能正常使用QQ，但无法打开网页</p>
<p>解决办法：请尝试设置图一中的DNS为114.114.114.114和114.114.115.115后重新尝试</p>
</li>
</ol>
<hr>
<p>另附一些诊断网络状态的命令</p>
<ol>
<li>ping 127.0.0.1       检查tcp/ip协议是否正常</li>
<li>ping 本机ip    检查网卡</li>
<li>ping 网关地址     检查和网关的连接性</li>
<li>nslookup命令可用于查看DNS是否正常</li>
<li>ping远程网站查看网络连通性</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 日常技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[移动硬盘的分区]]></title>
      <url>https://blog.palemoky.top/2016/12/10/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E7%9A%84%E5%88%86%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p>我们刚拿到一个移动硬盘的时候，通常都是将其根据我们的需要划分为多个分区，那首先要了解一下各种格式的优缺点及适用场景：<br><a id="more"></a></p>
<h4 id="各种格式对比"><a href="#各种格式对比" class="headerlink" title="各种格式对比"></a>各种格式对比</h4><table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">FAT32</td>
<td style="text-align:center">全平台支持</td>
<td style="text-align:center">不支持单个文件大于4G的移动</td>
</tr>
<tr>
<td style="text-align:center">NTFS</td>
<td style="text-align:center">Windows平台下最佳</td>
<td style="text-align:center">Mac平台下可读不可写（可购买Paragon NTFS for Mac写入数据）</td>
</tr>
<tr>
<td style="text-align:center">exFAT</td>
<td style="text-align:center">全平台支持，适合小文件的存储，U盘常用格式</td>
<td style="text-align:center">据查在某些情况下容易丢失数据</td>
</tr>
<tr>
<td style="text-align:center">HFS+（日志式）</td>
<td style="text-align:center">Mac下最佳，TimeMachine要求的格式</td>
<td style="text-align:center">Windows下不可读不可写</td>
</tr>
<tr>
<td style="text-align:center">ext4</td>
<td style="text-align:center">Linux下最佳，可读写NTFS和HFS+</td>
<td style="text-align:center">暂未发现</td>
</tr>
</tbody>
</table>
<p>表格数据来源：<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AF%B9%E6%AF%94" target="_blank" rel="noopener">文件系统对比</a></p>
<h4 id="实际分区举例"><a href="#实际分区举例" class="headerlink" title="实际分区举例"></a>实际分区举例</h4><p>以博主的情况为例，手上有一个WD My Passport Ultra的1T移动硬盘，通常在Mac下使用，而且要用此盘作Time Machine，其次就是Windows平台的使用，因此需要划分3个分区。Mac分区和Time Machine自然是日志式，Windows平台格式如果是FAT32自然是很方便，但经常会移动4G以上的文件，exFAT又可能会丢失数据，因此决定使用NTFS格式。</p>
<p>接下来，在Windows平台下使用磁盘精灵（DiskGenius）将硬盘分为1个600G的FAT32格式和1个400G的NTFS格式，然后在Mac自带的磁盘工具下将FAT32格式的600G再划分为400G和200G的日志式，这样就能够满足我的日常生活需要了，而且稳定性和兼容性都很不错。<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA.jpg" alt="硬盘分区"></p>
]]></content>
      
        <categories>
            
            <category> 日常技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分区 </tag>
            
            <tag> 磁盘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac设置快速休眠和锁屏]]></title>
      <url>https://blog.palemoky.top/2016/12/10/Mac%E8%AE%BE%E7%BD%AE%E5%BF%AB%E9%80%9F%E4%BC%91%E7%9C%A0/</url>
      <content type="html"><![CDATA[<p>众所周知，在Windows操作系统下，我们可以通过<code>Windows+L</code>键来锁定屏幕，转到Mac平台下一段时间后，我发现Mac似乎并没有这样的按键，一番搜索后，发现了以下几种方法来实现快速锁屏或休眠。<br><a id="more"></a></p>
<h3 id="方式一-合盖"><a href="#方式一-合盖" class="headerlink" title="方式一 合盖"></a>方式一 合盖</h3><p>众所周知，Mac系统非常的稳定，我们甚至可以半年不关机，即合即走，即开即用，非常方便。因此，我们可以通过盒盖的方式来使系统进入休眠的状态，但这种方式不够安全，如果你刚刚盒盖起身离去，另一个人马上就过来打开你的电脑，他仍然可以不需要输入密码而直接进入系统。在休眠状态下，系统会断开网络，保存正在运行的程序状态，直至系统被唤醒。</p>
<h3 id="方式二-触发角"><a href="#方式二-触发角" class="headerlink" title="方式二 触发角"></a>方式二 触发角</h3><p>打开”系统偏好设置”，然后点击屏幕保护程序下的触发角</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/%E8%AE%BE%E7%BD%AE%E8%A7%A6%E5%8F%91%E8%A7%92.jpg" alt="触发角设置"></p>
<p>这样，当鼠标移动到显示器的右下角时，系统就会进入休眠状态。如果你有外接显示器，无论你在哪个显示器下进行此操作都是可以生效的。</p>
<p>这种方式下，实质与方式一相同，只不过不需要合盖而已，因此同样不够安全。</p>
<h3 id="方式三-Alfred锁定计算机"><a href="#方式三-Alfred锁定计算机" class="headerlink" title="方式三 Alfred锁定计算机"></a>方式三 Alfred锁定计算机</h3><p>由于方式一、二对于有重要数据的人来说仍然不够安全，因此我们需要一种能够像Windows+L那样的快速锁屏方式来保证数据安全。<br>首先来简单介绍以下Alfred，这是一个提升Mac效率的神器，可以看作是系统自带的Spotlight的增强版，我们绝大多数的操作都可以在呼出Alfred后马上执行，如查单词（付费版）、算术、打开软件、使用搜索引擎搜索（自定义搜索引擎需付费）等。</p>
<p>当然了，Alfred也具备了Spotlight所没有的锁屏功能，我们直接呼出Alfred后输入”lock”回车即可锁定屏幕，从而保证我们的数据安全。而且这一功能在免费版本中即可使用。</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/Alfred%E9%94%81%E5%B1%8F.jpg" alt="Alfred"></p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 锁屏 </tag>
            
            <tag> 安全 </tag>
            
            <tag> 休眠 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[外接显示器的设置]]></title>
      <url>https://blog.palemoky.top/2016/12/09/%E5%A4%96%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>小屏幕的MacBook/MacBook Pro放在桌上长时间使用，眼睛比较累，而且，长时间低头看屏幕，易得颈椎病，绝对有损健康。配一台大屏幕的外置显示器不失为两全其美的好办法。<br><a id="more"></a><br>首先，得买一台中意的大屏幕LED显示器（废话undefined ）。一般22~27吋的、全高清的就比较好。如果你经济条件好，当然可以买尺寸更大的、分辨率更高的Apple大屏显示器。</p>
<p>其次，摆放好本本和外置显示器的位置，根据支持的接口情况，将大屏幕LED显示器与MacBook Air/MacBook Pro用ThunderBolt或HDMI线连接后，开机。</p>
<p>接着，进行一些必要的设置。以显示器设为“扩展”为例：</p>
<ol>
<li><p>打开“系统偏好设置-显示器”，出现两个显示器的设置窗口。可以将设置窗口拖到任一显示屏上。如果不能正确显示外置显示器信息，就点击“检测显示器”。</p>
</li>
<li><p>对每一块显示屏，设置相应的最合适的分辨率。<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%A4%96%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8%E8%AE%BE%E7%BD%AE.jpg" alt="外接显示器的设置"></p>
</li>
<li><p>点击“排列”，将显示器图形拖到跟实际位置对应的左/右位置。这样，当你将外置显示器设置为默认的“扩展”桌面时，就不至于发生要将鼠标反向移动到另一块屏幕上的尴尬。<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%A4%96%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8%E6%8E%92%E5%88%97.jpg" alt="外接显示器的排列设置"></p>
</li>
<li><p>如果你要将外置显示器作为主屏幕，还必须进行以下设置：<br>（1）将设置图中小屏幕上面的白色菜单栏拖到大屏幕图标上方。两个屏幕都会闪一下，菜单栏就移到大屏幕上方，大屏就是主屏幕了。<br>（2）如果你原来已将Dock放在小屏幕的左/右侧，而现在Dock仍在小屏幕上，那么，还要将Dock移到大屏幕上。方法是：右键点击“Dock”的“斑马线”分隔符，选择“置于屏幕上的位置-左边/右边”，将Dock设置到大屏侧边。注意：如果你喜欢将Dock放在主屏幕的右边，那么，开始安排位置的时候，你的本本就应该放在外置显示器的左边，因为你的大屏是小屏幕的“扩展”；反之亦然。</p>
</li>
<li><p>如果需要的话，选中“在菜单中显示显示器图标”，在桌面顶部菜单中出现显示器图标，方便以后更改设置。</p>
</li>
<li><p>如果你要关闭本本的小屏幕、只用外置大屏幕，那么，只要合上本本的盖子，几秒后大屏幕自动黑屏后再变亮，你就可以用鼠标在大屏幕上操作了。如果你要输入文字，那么，还需要添加一个键盘（USB或蓝牙、无线的都可以）</p>
</li>
<li><p>如果你觉得在外接显示器后移动鼠标变得费力，那你可以试试在Chrome或Firefox下安装Vimium扩展，这样就可以无需鼠标畅游web了<br><img src="http://ohx73ws1b.bkt.clouddn.com/Vimium.jpg" alt="Vimium"></p>
</li>
</ol>
<p>Windows下的设置大同小异，在此不再赘述。</p>
]]></content>
      
        <categories>
            
            <category> 日常技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac中Homebrew教程]]></title>
      <url>https://blog.palemoky.top/2016/12/09/Mac%E4%B8%ADHomebrew%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>今天我们来谈谈Mac下的包管理工具Homebrew</p>
<a id="more"></a>
<h3 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h3><ul>
<li>查找软件包：brew search /wge<em>/        /wge</em>/是正则表达式，需要包含在/中</li>
<li>安装软件：brew install git</li>
<li>卸载软件：brew uninstall git</li>
<li>删除软件包：brew remove wget</li>
<li>列出已安装的软件：brew list</li>
<li>列出软件包的依赖关系：brew deps wget</li>
<li>列出过时的软件包：brew outdated</li>
<li>更新：brew update</li>
<li>删除已下载的安装包：brew cleanup [包名]</li>
<li>显示软件信息：brew info 包名</li>
<li>切换同一软件的不同版本：brew switch 包名 版本号</li>
<li>浏览器打开官网：brew home</li>
<li>将软件链接到应用：brew linkapps 软件名</li>
<li>查看brew的开机启动项：brew services list</li>
<li>清除brew无效的开机启动项：brew services cleanup</li>
<li>如果某个包有多个版本，那么先使用brew switch &lt;包名&gt; &lt;版本号&gt; 来切换到该版本然后再使用uninstall 来卸载，如果卸载全部版本那么使用–force 选项。</li>
<li>就像ubuntu的ppa一样，很多时候有些软件包并不在官方提供列表里面而是由第三方提供的这个时候，我们就需要使用下面的命令：brew [un]tap &lt;github_userid/repo_name&gt; #添加或者删除仓库(注意repo_name 只是实际仓库名的一部分，而实际仓库名的前缀必须是homebrew- 。比如brew tap neovim/neovim# 这样实际仓库名就是homebrew-neovim)</li>
<li>列出已经tapped的仓库：brew tap(其中，caskroom/cask、homebrew/core、homebrew/dupes是默认自带的)</li>
<li>brew中某个软件存在多个版本的管理<a href="https://my.oschina.net/uniquejava/blog/491030" target="_blank" rel="noopener">https://my.oschina.net/uniquejava/blog/491030</a></li>
<li>brew的总结<a href="https://zhuanlan.zhihu.com/p/22598799" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22598799</a></li>
</ul>
<h3 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew-Cask"></a>Homebrew-Cask</h3><p>homebrew的扩展，一个功能等同于AppStore的东西，用于安装图形界面等Mac程序，安装软件通过命令行安装，当然可以一行命令同时安装多个软件啦<br>在已经安装了Homebrew的前提下，该工具的安装：brew tap phinze/homebrew-cask &amp;&amp; brew install brew-cask  </p>
<ul>
<li>安装应用：brew cask install 应用名1 应用名2 应用名3</li>
<li>搜索应用：brew cask search 应用名</li>
<li>查看应用信息：brew cask info 应用名</li>
<li>卸载应用：brew cask uninstall 应用名</li>
<li>查看已安装：brew cask list</li>
<li>查看配置是否正确：brew cask doctor</li>
<li>删除下载的安装包：brew cask cleanup<br>注意：该软件并未提供更新软件的命令，更新时请使用软件内置更新</li>
</ul>
<h3 id="Cakebrew"><a href="#Cakebrew" class="headerlink" title="Cakebrew"></a>Cakebrew</h3><p>cakebrew是一个可视化homebrew的工具，相当于你输入brew list、brew search、brew doctor等brew命令操作</p>
<h3 id="LaunchRocket"><a href="#LaunchRocket" class="headerlink" title="LaunchRocket"></a>LaunchRocket</h3><p>这是一个可视化管理homebrew已安装应用等管理器，安装完后在系统设置中显示。<br>安装命令：brew cask install launchrocket<br><img src="http://ohx73ws1b.bkt.clouddn.com/LaunchRocket.jpg" alt="LaunchRocket"><br><img src="http://ohx73ws1b.bkt.clouddn.com/LaunchRocket%20Status.jpg" alt="LaunchRocket"></p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> OSX </tag>
            
            <tag> Homebrew </tag>
            
            <tag> brew </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome插件推荐]]></title>
      <url>https://blog.palemoky.top/2016/12/09/Chrome%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<p>扩展推荐列表</p>
<h3 id="1-Adblock-Plus"><a href="#1-Adblock-Plus" class="headerlink" title="1. Adblock Plus"></a>1. <a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener">Adblock Plus</a></h3><a id="more"></a>
<p>   推荐理由：强力去除各种广告，包括YouTube的视频广告，不过无法过滤视屏广告。有些网站会反屏蔽广告，否则不能浏览页面，这样的网站加白名单就好了。</p>
<h3 id="2-Infinity新标签页"><a href="#2-Infinity新标签页" class="headerlink" title="2. Infinity新标签页"></a>2. <a href="https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg" target="_blank" rel="noopener">Infinity新标签页</a></h3><p>   推荐理由：优雅的图标、漂亮的壁纸，每日自动切换，天天都有好心情</p>
<h3 id="3-Tampermonkey-Firefox中是GreaseMonkey附加组件"><a href="#3-Tampermonkey-Firefox中是GreaseMonkey附加组件" class="headerlink" title="3. Tampermonkey(Firefox中是GreaseMonkey附加组件)"></a>3. <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a>(Firefox中是GreaseMonkey附加组件)</h3><p>   推荐理由：脚本工具的管理工具，可以通过修改本地的js或css代码来自定义页面。<br>   以下推荐脚本列表：</p>
<ul>
<li><a href="https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6" target="_blank" rel="noopener">一行代码，解决百度云大文件下载限制</a></li>
<li><a href="https://greasyfork.org/zh-CN/scripts/24192-kill-baidu-ad" target="_blank" rel="noopener">百度广告(首尾推广及右侧广告)清理</a></li>
<li><a href="https://greasyfork.org/zh-CN/scripts/10582-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%AB%98%E9%9F%B3%E8%B4%A8%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">网易云音乐高音质支持</a></li>
<li><a href="https://greasyfork.org/zh-CN/scripts/6489-zhihu-visitor" target="_blank" rel="noopener">知乎免登录</a></li>
</ul>
<h3 id="4-网盘助手"><a href="#4-网盘助手" class="headerlink" title="4. 网盘助手"></a>4. 网盘助手</h3><p>   推荐理由：本地安装Aria2后配合此扩展绕过百度云限速与客户端大小限制</p>
<h3 id="5-Proxy-SwitchyOmega"><a href="#5-Proxy-SwitchyOmega" class="headerlink" title="5. Proxy SwitchyOmega"></a>5. <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">Proxy SwitchyOmega</a></h3><p>   推荐理由：轻松快捷管理和切换代理，仍然记得当年GAE和这个配合翻GFW</p>
<h3 id="6-OneTab"><a href="#6-OneTab" class="headerlink" title="6. OneTab"></a>6. <a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="noopener">OneTab</a></h3><p>   由于Chrome特别消耗内存，对于那些我们暂时不看的页面，我们都可以收集到OneTab中，降低系统内存消耗</p>
<h3 id="7-JSON-Viewer"><a href="#7-JSON-Viewer" class="headerlink" title="7. JSON Viewer"></a>7. JSON Viewer</h3><p>   推荐理由：将json格式的数据格式化输出，方便阅读。由于之前的JSONView被提示有安全漏洞，就转为这个了。</p>
<h3 id="8-Vimium"><a href="#8-Vimium" class="headerlink" title="8. Vimium"></a>8. <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noopener">Vimium</a></h3><p>   推荐理由：忘掉鼠标吧，用Vim的快捷键来浏览网页，快速准确找到你想要的</p>
<h3 id="9-Xdebug-helper"><a href="#9-Xdebug-helper" class="headerlink" title="9. Xdebug helper"></a>9. <a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc" target="_blank" rel="noopener">Xdebug helper</a></h3><p>   推荐理由：配合IDE调试代码，程序员必备神器</p>
<h3 id="10-Postman"><a href="#10-Postman" class="headerlink" title="10. Postman"></a>10. <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" target="_blank" rel="noopener">Postman</a></h3><p>推荐理由：Postman是调试web api的一款利器，它能够发送任何类型的HTTP requests (GET, HEAD, POST, PUT..)，附带任何数量的参数+ headers。</p>
<p>支持不同的认证机制（basic, digest, OAuth），接收到的响应语法高亮（HTML，JSON或XML）。</p>
<p>Postman 能够保留了历史的请求，这样我们就可以很容易地重新发送请求，有一个“集合”功能，用于存储所有请求相同的API/域。</p>
<h3 id="11-EditThisCookie"><a href="#11-EditThisCookie" class="headerlink" title="11. EditThisCookie"></a>11. <a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener">EditThisCookie</a></h3><p>推荐理由：EditThisCookie是一个cookie管理器。您可以添加，删除，编辑，搜索，锁定和屏蔽cookies！</p>
<h3 id="12-FeHelper"><a href="#12-FeHelper" class="headerlink" title="12. FeHelper"></a>12. <a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad" target="_blank" rel="noopener">FeHelper</a></h3><p>推荐理由：提供了很多常用的FE工具，包括字符串编解码、图片base64编码、代码压缩、美化、JSON格式化、正则表达式、时间转换工具、二维码生成器、编码规范检测、页面性能检测、栅格检测、JS运行效率分析等。</p>
<p>非常实用，强烈推荐！</p>
<h3 id="13-划词翻译"><a href="#13-划词翻译" class="headerlink" title="13. 划词翻译"></a>13. <a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad" target="_blank" rel="noopener">划词翻译</a></h3><p>推荐理由：一个简便但强大的翻译扩展。支持谷歌、百度、有道、必应四大翻译和朗读引擎，可以方便的查看、复制和朗读不同引擎的翻译结果。</p>
<p>对阅读英文文档非常有帮助。</p>
<h3 id="14-豆藤"><a href="#14-豆藤" class="headerlink" title="14.豆藤"></a>14.<a href="http://www.douban.com/note/481190431/" target="_blank" rel="noopener">豆藤</a></h3><p>推荐理由：豆瓣是个好网站，找书找电影先去豆瓣逛逛～豆藤可以一键找出电影、书籍的下载地址，还提供了很多豆瓣的很多小功能。</p>
]]></content>
      
        <categories>
            
            <category> 日常技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo遇到的那些坑]]></title>
      <url>https://blog.palemoky.top/2016/12/09/hexo%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>首先，贴上我搭建成功的教程地址 <a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a><br><a id="more"></a><br>其次，这个博客里还有hexo中常见的问题 <a href="https://xuanwo.org/2014/08/14/hexo-usual-problem/" target="_blank" rel="noopener">Hexo常见问题解决方案</a></p>
<p>接下来，我们来谈谈我在搭建时遇到的一些坑：</p>
<h3 id="1-hexo的3行报错-DTrace-错误"><a href="#1-hexo的3行报错-DTrace-错误" class="headerlink" title="1. hexo的3行报错(DTrace 错误)"></a>1. hexo的3行报错(DTrace 错误)</h3><pre><code>   { [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
   { [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
   { [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
</code></pre><p>   出现这种情况是因为GFW导致npm下载过程中依赖库不完整</p>
<p>   解决办法：</p>
<p>   更换国内镜像<a href="http://www.jianshu.com/p/0deb70e6f395" target="_blank" rel="noopener">http://www.jianshu.com/p/0deb70e6f395</a><br>   然后 卸载并重新安装</p>
<pre><code>   $ npm uninstall hexo-cli -g
   $ npm install hexo-cli -g
</code></pre><p>   或者使用以下命令安装解决</p>
<pre><code>   $ npm install hexo --no-optional
</code></pre><p>   反正我是用的更换源的办法解决的，这样解决的更彻底，速度提升了不只一个量级。</p>
<h3 id="2-博客在本地测试正常，部署到线上没有样式"><a href="#2-博客在本地测试正常，部署到线上没有样式" class="headerlink" title="2. 博客在本地测试正常，部署到线上没有样式"></a>2. 博客在本地测试正常，部署到线上没有样式</h3><p>   这个情况我们可以在控制台中看到，样式的相关文件加载报了404错误，就是因为路径的填写问题，注意hexo官网对于网址路径的解释<br>   <img src="http://ohx73ws1b.bkt.clouddn.com/%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E9%97%AE%E9%A2%98.jpg" alt="博客路径问题"></p>
<h3 id="3-hexo-g命令报错"><a href="#3-hexo-g命令报错" class="headerlink" title="3. hexo g命令报错"></a>3. <code>hexo g</code>命令报错</h3><p>   <img src="http://ohx73ws1b.bkt.clouddn.com/hexo%20g%E6%8A%A5%E9%94%99.jpg" alt="渲染报错"><br>   如果遇到hexo g报错的情况，这并不是由于文件的权限问题导致的，同样是由于yml严格的语法问题导致的，这个问题导致我用IDE打开博客时都会卡死<br>   <img src="http://ohx73ws1b.bkt.clouddn.com/hexo%20g.jpg" alt="渲染报错根源"></p>
<p>   因此，我们在编辑yml文件时要格外的小心，除了<code>:</code>后<strong>必须</strong>有空格外，其中的缩进也是有严格要求的，我们可以通过在线网站<a href="http://www.yamllint.com/" target="_blank" rel="noopener">YAML Lint</a>来帮助我们排错，以免因为yml的格式问题耗费太多的时间。</p>
<h3 id="4-Hexo常见问题解决方案"><a href="#4-Hexo常见问题解决方案" class="headerlink" title="4. Hexo常见问题解决方案"></a>4. Hexo常见问题解决方案</h3><p><a href="https://xuanwo.org/2014/08/14/hexo-usual-problem/" target="_blank" rel="noopener">https://xuanwo.org/2014/08/14/hexo-usual-problem/</a></p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSH密钥登录教程]]></title>
      <url>https://blog.palemoky.top/2016/12/09/SSH%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>从此再也不怕忘记密码了;)</p>
<a id="more"></a>
<h3 id="Step-1：检查密钥"><a href="#Step-1：检查密钥" class="headerlink" title="Step 1：检查密钥"></a>Step 1：检查密钥</h3><p>查看本机~/.ssh/目录下是否有ssh公钥(id_rsa.pub)和私钥(id_rsa)，如果没有或者干脆连.ssh目录都不存在，那么请使用<code>ssh-keygen -t rsa -C &quot;email@example.com&quot;</code>来创建ssh密钥。</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/SSH%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90.jpg" alt="生成ssh密钥"></p>
<p>它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。</p>
<h3 id="Step-2：将公钥放置到远程服务器"><a href="#Step-2：将公钥放置到远程服务器" class="headerlink" title="Step 2：将公钥放置到远程服务器"></a>Step 2：将公钥放置到远程服务器</h3><p>将本机的<strong>公钥.ssh/id_rsa.pub</strong>放置在远程服务器对应用户名目录（如/root/.ssh）下的<code>/.ssh/authorized_keys</code>中，一行一个，并且将.ssh和authorized_keys权限设置为700和600。<br>一个便捷的命令：<code>ssh-copy-id -i ~/.ssh/id_rsa.pub  root@192.168.0.3  [-pport]</code></p>
<ul>
<li>该命令会自动将本地的ssh公钥复制到远程主机的authorized_keys文件中，同时会自动设置相关权限。</li>
<li>若不支持该命令请手动复制id_rsa.pub内容到远程主机的authorized_keys（不存在请创建），或者使用ftp或sftp拷贝后重命名。</li>
</ul>
<h3 id="Step-3-设置本地ssh"><a href="#Step-3-设置本地ssh" class="headerlink" title="Step 3:设置本地ssh"></a>Step 3:设置本地ssh</h3><p>设置~/.ssh目录下的config文件</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/SSH%E7%9A%84%E9%85%8D%E7%BD%AE.jpg" alt="配置ssh"></p>
<h3 id="Step-4-使用ssh密钥登录"><a href="#Step-4-使用ssh密钥登录" class="headerlink" title="Step 4:使用ssh密钥登录"></a>Step 4:使用ssh密钥登录</h3><p>使用ssh+别名登录</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/SSH%E7%9A%84%E7%99%BB%E5%BD%95.jpg" alt="使用ssh密钥登录"></p>
<p>PS:如果你配置ssh免密钥登录失败时，检查一下</p>
<ol>
<li>你的authorized_keys文件是否放置在对应用户的文件夹下</li>
<li>你的.ssh和authorized_keys的权限设置是否正确</li>
</ol>
<h3 id="附：ssh原理"><a href="#附：ssh原理" class="headerlink" title="附：ssh原理"></a>附：ssh原理</h3><p>ssh密钥登录的原理：当我们使用普通方式登录时，远程主机通过/etc/shadow验证用户名和密码。而当我们配置好了ssh密钥登录时，我们每次发送登录请求时都会携带本机的私钥前往远程主机，远程主机收到登录请求后，不再去/etc/shadow校验，而转去authorized_keys查看是否已经存在对应的公钥（因为ssh的密钥是成对生成的，所以fingerprint是一样的），校验成功则登录成功，否则拒绝登录请求。</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/ssh%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> linux </tag>
            
            <tag> 密钥 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下安装Windows系统教程]]></title>
      <url>https://blog.palemoky.top/2016/12/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Windows%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>今天，有一台已经安装了Ubuntu 16.04，未分区的系统需要安装Windows 7双系统。</p>
<a id="more"></a>
<p>那接下来的第一步自然就是分区了，在Windows中磁盘精灵分区用的溜，但Linux中怎么分区呢？查询后得知Linux中可以用Gparted视图工具来分区，所以，Ubuntu系统用apt-get install gparted，CentOS用yum install gparted安装。</p>
<p>你以为分区就这么顺利？too young too simple，进去后才发现正在运行的系统所在分区是不可以执行分区操作的，具体的表现就是/dev/sda*有把钥匙，并且磁盘容量的调整最大值和最小值都是磁盘总容量。好吧，再次Google，原来可以用Live USB（类似于Windows下的PE环境）来进行分区操作，接下来就开始用软碟通制作Ubuntu的启动盘，在漫长的等待后终于顺利分出一个空白分区，然后用gparted将未分配的分区格式化为NTFS格式（<font color="red">Windows系统分区必须此格式</font>）。</p>
<p>接下来用优启通安装Windows 7，在重启的过程中系统提示“windows boot manager has been blocked by the current security policy”，那就关了boot选项的secure boot吧，兴冲冲的进去后发现这个选项是！灰！的！我&amp;*#w&amp;@%……折腾半天才想起来，现在的系统环境是UEFI+GPT，而Windows 7及以下只支持BIOS+MBR，要强制安装Windows 7只能将GPT转为MBR了，但这样会清空全盘数据，权衡之下，装Windows 10 LTSB吧，恰好之前封装过。重新将Windows分区格掉后开始安装，一切顺利，半小时后安装结束。双系统都能顺利进入和正常使用。</p>
<p>正当我为自己点赞时，开机发现竟然没有双系统选择延时，每次自动进入启动顺序的第一个系统，那这个问题怎么解决呢？再次查询后发现EasyBCD工具可以修复引导，使双系统开机出现选择按钮，不过呢，由于有其他事暂时没试，有空再搞，毕竟不是特别严重的问题。</p>
<hr>
<p>次日更<br>今天发现朋友的电脑开机竟然有了系统选择项，那我也就不用折腾了，这次系统的安装以完美收场，撒花～</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信连Wi-Fi使用教程]]></title>
      <url>https://blog.palemoky.top/2016/12/01/%E5%BE%AE%E4%BF%A1%E8%BF%9EWi-Fi%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>如今，越来越多的商家开始支持免费Wi-Fi，很多顾客到店后都会询问Wi-Fi密码是多少<br><a id="more"></a>，有些打印的贴在墙上的还好，至少识别起来不是那么费劲，有些手写的就要多花一些时间才能连接成功。我就在想，有没有什么更加便捷的方式让用户一键连接？带着这个问题，我想到了如今无处不在的二维码，二维码中可以蕴藏链接、文本等信息，如果顾客能够扫描二维码直接连接岂不是更好？在一番查找后找到了联图网，该网站支持Wi-Fi格式的二维码，且对生成的二维码允许嵌入logo等自定义设置，增添一些趣味。尝试一番后以失败告终，这种方案的问题在于，手机的确可以读取出Wi-Fi名和密码，但结果是文本的形式，顾客还需复制粘贴才可以。然后就在想，现在越来越多的软件都有扫描二维码功能，那谁来做这个Wi-Fi一键连接是最佳人选呢？答案当然是老少咸宜的微信！于是又去进行查询，果然，微信已于2015年3月份在公众号推出了该功能，下面，我们就来看看如何开通和使用吧～<br>首先，你要有一个门面店（至少要让微信相信你有），然后你还要有一个微信公众号，还没有的商家快去注册一个吧，相信微信的注册引导已经很清楚了。<br>注册成功后，登录公众号后台，点击“添加功能插件”（如下图），然后点击“微信连Wi-Fi”，然后依此点击“开通”—&gt;“同意”服务协议—&gt;”返回”—&gt;“查看功能”。<br><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E8%8F%9C%E5%8D%95.jpeg" alt="公众号菜单"></p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8F%92%E4%BB%B6.jpeg" alt="公众号插件"></p>
<p>至此，微信连Wi-Fi开通成功，左侧功能新增“门店管理”和“微信连Wi-Fi”两个按钮。</p>
<p><img src="http://ohx73ws1b.bkt.clouddn.com/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%8D%95.jpeg" alt="公众号新增菜单"></p>
<p>现在，我们点击“门店管理”，然后点击“新建门店”，之后填写门店的基本信息，完成后切换到“微信连Wi-Fi”，点击“设备管理”和“添加设备”，填写相关信息即可（注意此处的<font color="red">Wi-Fi名和密码至少要有一个是以大写的“WX”开头</font>）。然后将生成的二维码下载并粘贴在店内的醒目位置即可，顾客来了之后只需使用微信扫描该二维码即可一键连接Wi-Fi（扫描二维码时需联网，会<strong>消耗少量流量</strong>）。</p>
<p>公众号后台更可查看Wi-Fi在线人数以及历史趋势图，据此分析店铺的客流量，调整店铺的业务。更可向用户推送优惠券等促销内容。</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> wifi </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
